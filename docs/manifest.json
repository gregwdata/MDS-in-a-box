{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2023-03-11T02:47:20.687165Z", "invocation_id": "e1a54545-2559-41bf-85d3-5eac170a1ef7", "env": {}, "project_id": "aa6031d0981196ed6012e68422a8d236", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "duckdb"}, "nodes": {"model.nba_monte_carlo.prep_results_log": {"database": "mdsbox", "schema": "main", "name": "prep_results_log", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_results_log.sql", "original_file_path": "models/prep/prep_results_log.sql", "unique_id": "model.nba_monte_carlo.prep_results_log", "fqn": ["nba_monte_carlo", "prep", "prep_results_log"], "alias": "prep_results_log", "checksum": {"name": "sha256", "checksum": "83da83fc12e556025ecfc9aca64eb932dcab6a8c9fdfb162401669564a3495b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_results_log.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.189253, "relation_name": "\"mdsbox\".\"main\".\"prep_results_log\"", "raw_code": "{{\n    config(materialized='external')\n}}\n\nWITH cte_avg_elo AS (\n   SELECT AVG(elo_rating) AS elo_rating\n   FROM {{ source( 'nba_prep', 'elo_post' ) }}\n)\nSELECT \n   RL.*, \n   CASE WHEN visiting_team_elo_rating > home_team_elo_rating \n      THEN visiting_team ELSE home_team END AS favored_team,\n   CASE WHEN visiting_team_elo_rating > elo_rating THEN 1 ELSE 0 END AS visiting_team_above_avg,\n   CASE WHEN home_team_elo_rating > elo_rating THEN 1 ELSE 0 END AS home_team_above_avg\nFROM  {{ source( 'nba_prep', 'results_log' ) }} RL\nLEFT JOIN cte_avg_elo A ON 1=1", "language": "sql", "refs": [], "sources": [["nba_prep", "elo_post"], ["nba_prep", "results_log"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nba_monte_carlo.nba_prep.elo_post", "source.nba_monte_carlo.nba_prep.results_log"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_results_log.sql", "compiled": true, "compiled_code": "\n\nWITH cte_avg_elo AS (\n   SELECT AVG(elo_rating) AS elo_rating\n   FROM '/workspaces/nba-monte-carlo/data/data_catalog/prep/elo_post.parquet'\n)\nSELECT \n   RL.*, \n   CASE WHEN visiting_team_elo_rating > home_team_elo_rating \n      THEN visiting_team ELSE home_team END AS favored_team,\n   CASE WHEN visiting_team_elo_rating > elo_rating THEN 1 ELSE 0 END AS visiting_team_above_avg,\n   CASE WHEN home_team_elo_rating > elo_rating THEN 1 ELSE 0 END AS home_team_above_avg\nFROM  '/workspaces/nba-monte-carlo/data/data_catalog/prep/results_log.parquet' RL\nLEFT JOIN cte_avg_elo A ON 1=1", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.prep_latest_ratings": {"database": "mdsbox", "schema": "main", "name": "prep_latest_ratings", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_latest_ratings.sql", "original_file_path": "models/prep/prep_latest_ratings.sql", "unique_id": "model.nba_monte_carlo.prep_latest_ratings", "fqn": ["nba_monte_carlo", "prep", "prep_latest_ratings"], "alias": "prep_latest_ratings", "checksum": {"name": "sha256", "checksum": "54a846090e59651a3e88d3d6cc9c5527d26259689d261910940712ecbfa5a3f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_latest_ratings.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.4702516, "relation_name": "\"mdsbox\".\"main\".\"prep_latest_ratings\"", "raw_code": "WITH cte_team1 AS (\n    SELECT\n        date,\n        team1,\n        elo1_post\n    FROM {{ ref( 'prep_nba_elo_latest' ) }}\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_team2 AS (\n    SELECT\n        date,\n        team2,\n        elo2_post\n    FROM {{ ref( 'prep_nba_elo_latest' ) }}\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_combined AS (\n    SELECT * FROM cte_team1\n    UNION ALL\n    SELECT * from cte_team2\n),\n\ncte_days_ranked AS (\n    SELECT \n        *,\n        ROW_NUMBER() OVER (PARTITION BY team1 ORDER BY date DESC) AS rating_id\n    FROM cte_combined\n)\n\nSELECT\n    team1 AS team,\n    elo1_post AS elo_rating,\n    {{ var('latest_ratings') }} AS latest_ratings\nFROM cte_days_ranked\nWHERE rating_id = 1", "language": "sql", "refs": [["prep_nba_elo_latest"], ["prep_nba_elo_latest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.prep_nba_elo_latest"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_latest_ratings.sql", "compiled": true, "compiled_code": "WITH cte_team1 AS (\n    SELECT\n        date,\n        team1,\n        elo1_post\n    FROM \"mdsbox\".\"main\".\"prep_nba_elo_latest\"\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_team2 AS (\n    SELECT\n        date,\n        team2,\n        elo2_post\n    FROM \"mdsbox\".\"main\".\"prep_nba_elo_latest\"\n    WHERE elo1_post IS NOT NULL\n),\n\ncte_combined AS (\n    SELECT * FROM cte_team1\n    UNION ALL\n    SELECT * from cte_team2\n),\n\ncte_days_ranked AS (\n    SELECT \n        *,\n        ROW_NUMBER() OVER (PARTITION BY team1 ORDER BY date DESC) AS rating_id\n    FROM cte_combined\n)\n\nSELECT\n    team1 AS team,\n    elo1_post AS elo_rating,\n    True AS latest_ratings\nFROM cte_days_ranked\nWHERE rating_id = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.prep_nba_elo_latest": {"database": "mdsbox", "schema": "main", "name": "prep_nba_elo_latest", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_nba_elo_latest.sql", "original_file_path": "models/prep/prep_nba_elo_latest.sql", "unique_id": "model.nba_monte_carlo.prep_nba_elo_latest", "fqn": ["nba_monte_carlo", "prep", "prep_nba_elo_latest"], "alias": "prep_nba_elo_latest", "checksum": {"name": "sha256", "checksum": "63df23ec9fe3efac297555efedb654cf254da627c4ade41445fde064ecedfa00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_nba_elo_latest.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.4674702, "relation_name": "\"mdsbox\".\"main\".\"prep_nba_elo_latest\"", "raw_code": "SELECT *\nFROM {{ source( 'nba', 'nba_elo_latest' ) }}\nGROUP BY ALL", "language": "sql", "refs": [], "sources": [["nba", "nba_elo_latest"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nba_monte_carlo.nba.nba_elo_latest"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_nba_elo_latest.sql", "compiled": true, "compiled_code": "SELECT *\nFROM '/workspaces/nba-monte-carlo/data/data_catalog/psa/nba_elo_latest/*.parquet'\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.prep_schedule": {"database": "mdsbox", "schema": "main", "name": "prep_schedule", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_schedule.sql", "original_file_path": "models/prep/prep_schedule.sql", "unique_id": "model.nba_monte_carlo.prep_schedule", "fqn": ["nba_monte_carlo", "prep", "prep_schedule"], "alias": "prep_schedule", "checksum": {"name": "sha256", "checksum": "9031ca5fa897cbd82fea4495cb47f5cf27956fc2a41c92f5b0bdb85a91c34280"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_schedule.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.4680967, "relation_name": "\"mdsbox\".\"main\".\"prep_schedule\"", "raw_code": "SELECT *\nFROM {{ source( 'nba', 'schedule' ) }}", "language": "sql", "refs": [], "sources": [["nba", "schedule"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nba_monte_carlo.nba.schedule"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_schedule.sql", "compiled": true, "compiled_code": "SELECT *\nFROM '/workspaces/nba-monte-carlo/data/data_catalog/psa/nba_schedule_2023/*.parquet'", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.prep_elo_post": {"database": "mdsbox", "schema": "main", "name": "prep_elo_post", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_elo_post.sql", "original_file_path": "models/prep/prep_elo_post.sql", "unique_id": "model.nba_monte_carlo.prep_elo_post", "fqn": ["nba_monte_carlo", "prep", "prep_elo_post"], "alias": "prep_elo_post", "checksum": {"name": "sha256", "checksum": "fdd3bc9808b63874c256e9d4d1b3750cd1c030830396a9cb8bb3884ee09bacc8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_elo_post.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.2204032, "relation_name": "\"mdsbox\".\"main\".\"prep_elo_post\"", "raw_code": "SELECT\n    *,\n    {{ var('latest_ratings') }} AS latest_ratings\nFROM  {{ source( 'nba_prep', 'elo_post' ) }}", "language": "sql", "refs": [], "sources": [["nba_prep", "elo_post"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nba_monte_carlo.nba_prep.elo_post"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_elo_post.sql", "compiled": true, "compiled_code": "SELECT\n    *,\n    True AS latest_ratings\nFROM  '/workspaces/nba-monte-carlo/data/data_catalog/prep/elo_post.parquet'", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.prep_xf_series_to_seed": {"database": "mdsbox", "schema": "main", "name": "prep_xf_series_to_seed", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_xf_series_to_seed.sql", "original_file_path": "models/prep/prep_xf_series_to_seed.sql", "unique_id": "model.nba_monte_carlo.prep_xf_series_to_seed", "fqn": ["nba_monte_carlo", "prep", "prep_xf_series_to_seed"], "alias": "prep_xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "bd7a7f5c0b7bc96e54e9c44c4aa025c5c0a99f41e7142171887dfadd421ea42e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_xf_series_to_seed.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.469245, "relation_name": "\"mdsbox\".\"main\".\"prep_xf_series_to_seed\"", "raw_code": "SELECT *\nFROM {{ source( 'nba', 'xf_series_to_seed' ) }}\nGROUP BY ALL", "language": "sql", "refs": [], "sources": [["nba", "xf_series_to_seed"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nba_monte_carlo.nba.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_xf_series_to_seed.sql", "compiled": true, "compiled_code": "SELECT *\nFROM '/workspaces/nba-monte-carlo/data/data_catalog/psa/xf_series_to_seed/*.parquet'\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.prep_team_ratings": {"database": "mdsbox", "schema": "main", "name": "prep_team_ratings", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "prep/prep_team_ratings.sql", "original_file_path": "models/prep/prep_team_ratings.sql", "unique_id": "model.nba_monte_carlo.prep_team_ratings", "fqn": ["nba_monte_carlo", "prep", "prep_team_ratings"], "alias": "prep_team_ratings", "checksum": {"name": "sha256", "checksum": "ded5fe8b9f84974bfa8c6800d74b5fe62ca6080db5296e9815784054abe7e607"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/prep/prep_team_ratings.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.4686751, "relation_name": "\"mdsbox\".\"main\".\"prep_team_ratings\"", "raw_code": "SELECT *\nFROM {{ source( 'nba', 'team_ratings' ) }}", "language": "sql", "refs": [], "sources": [["nba", "team_ratings"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.nba_monte_carlo.nba.team_ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/prep/prep_team_ratings.sql", "compiled": true, "compiled_code": "SELECT *\nFROM '/workspaces/nba-monte-carlo/data/data_catalog/psa/team_ratings/*.parquet'", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playoff_sim_r1": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r1", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/playoff_sim_r1.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r1.sql", "unique_id": "model.nba_monte_carlo.playoff_sim_r1", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r1"], "alias": "playoff_sim_r1", "checksum": {"name": "sha256", "checksum": "ea7ad0ed1b02c8bb22ba3641296f86812c920679b270b11b7076e7ae32d932d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r1.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2323592, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r1\"", "raw_code": "{{ \n    config(materialized='external')\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r1','initialize_seeding' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [["random_num_gen"], ["schedules"], ["random_num_gen"], ["initialize_seeding"], ["initialize_seeding"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r1.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"mdsbox\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"initialize_seeding\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"initialize_seeding\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r1' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playoff_sim_r4": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r4", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/playoff_sim_r4.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r4.sql", "unique_id": "model.nba_monte_carlo.playoff_sim_r4", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r4"], "alias": "playoff_sim_r4", "checksum": {"name": "sha256", "checksum": "801440d961da90fc6b46522e14dc076ed2eb53214f665fd1b1a1be8532159351"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r4.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2451022, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r4\"", "raw_code": "{{ \n    config(materialized='external')\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r4','playoff_sim_r3' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [["random_num_gen"], ["schedules"], ["random_num_gen"], ["playoff_sim_r3"], ["playoff_sim_r3"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r4.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"mdsbox\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r3\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r3\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r4' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playoff_sim_r2": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r2", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/playoff_sim_r2.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r2.sql", "unique_id": "model.nba_monte_carlo.playoff_sim_r2", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r2"], "alias": "playoff_sim_r2", "checksum": {"name": "sha256", "checksum": "faf723843c66839a0ca3f5f1675a6fcc71e8e179692a73f59bb6784b63f9c2dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r2.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2516453, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r2\"", "raw_code": "{{ \n    config(materialized='external')\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r2','playoff_sim_r1' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [["random_num_gen"], ["schedules"], ["random_num_gen"], ["playoff_sim_r1"], ["playoff_sim_r1"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r2.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"mdsbox\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r1\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r1\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r2' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.initialize_seeding": {"database": "mdsbox", "schema": "main", "name": "initialize_seeding", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/initialize_seeding.sql", "original_file_path": "models/conformed/playoffs/initialize_seeding.sql", "unique_id": "model.nba_monte_carlo.initialize_seeding", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "initialize_seeding"], "alias": "initialize_seeding", "checksum": {"name": "sha256", "checksum": "1e9a067ffe9b0e036d63a70a53452b06d8dca6e5385781e0a6f5b37eca38cb44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/initialize_seeding.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2581902, "relation_name": "\"mdsbox\".\"main\".\"initialize_seeding\"", "raw_code": "{{ \n    config(materialized='external')\n}}\n\nWITH cte_teams AS (\n    SELECT\n        scenario_id,\n        conf,\n        winning_team,\n        seed,\n        elo_rating\n    FROM {{ ref( 'reg_season_end' ) }}\n    WHERE season_rank < 7\n    UNION ALL\n    SELECT *\n    FROM {{ ref('playin_sim_r2_end' ) }}\n)\n\nSELECT\n    T.*,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_teams T", "language": "sql", "refs": [["reg_season_end"], ["playin_sim_r2_end"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.playin_sim_r2_end"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/initialize_seeding.sql", "compiled": true, "compiled_code": "\n\nWITH cte_teams AS (\n    SELECT\n        scenario_id,\n        conf,\n        winning_team,\n        seed,\n        elo_rating\n    FROM \"mdsbox\".\"main\".\"reg_season_end\"\n    WHERE season_rank < 7\n    UNION ALL\n    SELECT *\n    FROM \"mdsbox\".\"main\".\"playin_sim_r2_end\"\n)\n\nSELECT\n    T.*,\n    0 AS sim_start_game_id\nFROM cte_teams T", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playoff_summary": {"database": "mdsbox", "schema": "main", "name": "playoff_summary", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/playoff_summary.sql", "original_file_path": "models/conformed/playoffs/playoff_summary.sql", "unique_id": "model.nba_monte_carlo.playoff_summary", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_summary"], "alias": "playoff_summary", "checksum": {"name": "sha256", "checksum": "c1829458b68c14d8e3a291e83686dd2103e462d696c5750255766e0cf864737a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/playoff_summary.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.2645833, "relation_name": "\"mdsbox\".\"main\".\"playoff_summary\"", "raw_code": "WITH cte_playoffs_r1 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_playoffs\n    FROM {{ ref( 'initialize_seeding' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r2 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_conf_semis\n    FROM {{ ref( 'playoff_sim_r1' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r3 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_conf_finals\n    FROM {{ ref( 'playoff_sim_r2' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_r4 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_finals\n    FROM {{ ref( 'playoff_sim_r3' ) }}\n    GROUP BY ALL\n),\n\ncte_playoffs_finals AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS won_finals\n    FROM {{ ref( 'playoff_sim_r4' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    R1.made_playoffs,\n    R2.made_conf_semis,\n    R3.made_conf_finals,\n    R4.made_finals,\n    F.won_finals\nFROM {{ ref( 'teams' ) }} T\nLEFT JOIN cte_playoffs_r1 R1 ON R1.winning_team = T.team\nLEFT JOIN cte_playoffs_r2 R2 ON R2.winning_team = T.team\nLEFT JOIN cte_playoffs_r3 R3 ON R3.winning_team = T.team\nLEFT JOIN cte_playoffs_r4 R4 ON R4.winning_team = T.team\nLEFT JOIN cte_playoffs_finals F ON F.winning_team = T.team", "language": "sql", "refs": [["initialize_seeding"], ["playoff_sim_r1"], ["playoff_sim_r2"], ["playoff_sim_r3"], ["playoff_sim_r4"], ["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_summary.sql", "compiled": true, "compiled_code": "WITH cte_playoffs_r1 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_playoffs\n    FROM \"mdsbox\".\"main\".\"initialize_seeding\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r2 AS (\n    SELECT\n        winning_team,\n        COUNT(*) AS made_conf_semis\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r1\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r3 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_conf_finals\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r2\"\n    GROUP BY ALL\n),\n\ncte_playoffs_r4 AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS made_finals\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r3\"\n    GROUP BY ALL\n),\n\ncte_playoffs_finals AS (\n    SELECT \n        winning_team,\n        COUNT(*) AS won_finals\n    FROM \"mdsbox\".\"main\".\"playoff_sim_r4\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    R1.made_playoffs,\n    R2.made_conf_semis,\n    R3.made_conf_finals,\n    R4.made_finals,\n    F.won_finals\nFROM \"mdsbox\".\"main\".\"teams\" T\nLEFT JOIN cte_playoffs_r1 R1 ON R1.winning_team = T.team\nLEFT JOIN cte_playoffs_r2 R2 ON R2.winning_team = T.team\nLEFT JOIN cte_playoffs_r3 R3 ON R3.winning_team = T.team\nLEFT JOIN cte_playoffs_r4 R4 ON R4.winning_team = T.team\nLEFT JOIN cte_playoffs_finals F ON F.winning_team = T.team", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playoff_sim_r3": {"database": "mdsbox", "schema": "main", "name": "playoff_sim_r3", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/playoff_sim_r3.sql", "original_file_path": "models/conformed/playoffs/playoff_sim_r3.sql", "unique_id": "model.nba_monte_carlo.playoff_sim_r3", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "playoff_sim_r3"], "alias": "playoff_sim_r3", "checksum": {"name": "sha256", "checksum": "7047866bef75cf916896994fa69e461b695ba3cf7827fb2798a2c603c0def02d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r3.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2678998, "relation_name": "\"mdsbox\".\"main\".\"playoff_sim_r3\"", "raw_code": "{{ \n    config(materialized='external')\n}}\n\nWITH cte_playoff_sim AS (\n    {{ playoff_sim('playoffs_r3','playoff_sim_r2' ) }}\n)\n\n{{ playoff_sim_end( 'cte_playoff_sim' ) }}", "language": "sql", "refs": [["random_num_gen"], ["schedules"], ["random_num_gen"], ["playoff_sim_r2"], ["playoff_sim_r2"], ["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.playoff_sim", "macro.nba_monte_carlo.playoff_sim_end"], "nodes": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/playoff_sim_r3.sql", "compiled": true, "compiled_code": "\n\nWITH cte_playoff_sim AS (\n    \n-- depends-on: \"mdsbox\".\"main\".\"random_num_gen\"\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM \"mdsbox\".\"main\".\"schedules\" S\n    \n    LEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r2\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  \"mdsbox\".\"main\".\"playoff_sim_r2\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    \n    WHERE S.type =  'playoffs_r3' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n)\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    0 AS sim_start_game_id\nFROM cte_playoff_sim E\nLEFT JOIN \"mdsbox\".\"main\".\"xf_series_to_seed\" XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.season_summary": {"database": "mdsbox", "schema": "main", "name": "season_summary", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playoffs/season_summary.sql", "original_file_path": "models/conformed/playoffs/season_summary.sql", "unique_id": "model.nba_monte_carlo.season_summary", "fqn": ["nba_monte_carlo", "conformed", "playoffs", "season_summary"], "alias": "season_summary", "checksum": {"name": "sha256", "checksum": "6cc03bcc844cfda5b51334170f7539bf3dba646802dd402db267c3673dbe87fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playoffs/season_summary.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2753212, "relation_name": "\"mdsbox\".\"main\".\"season_summary\"", "raw_code": "{{ \n    config(\n        materialized='external'\n) }}\n\nSELECT\n    ROUND(ratings.elo_rating,0)::int || ' (' || CASE WHEN original_rating < elo_rating THEN '+' ELSE '' END || (elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*,\n    P.made_playoffs,\n    P.made_conf_semis,\n    P.made_conf_finals,\n    P.made_finals,\n    P.won_finals\nFROM {{ ref( 'reg_season_summary' ) }} R\nLEFT JOIN {{ ref( 'playoff_summary' ) }} P ON P.team = R.team\nLEFT JOIN {{ ref( 'ratings' ) }} ratings ON ratings.team = R.team", "language": "sql", "refs": [["reg_season_summary"], ["playoff_summary"], ["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_summary", "model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playoffs/season_summary.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    ROUND(ratings.elo_rating,0)::int || ' (' || CASE WHEN original_rating < elo_rating THEN '+' ELSE '' END || (elo_rating-original_rating)::int || ')' AS elo_rating,\n    R.*,\n    P.made_playoffs,\n    P.made_conf_semis,\n    P.made_conf_finals,\n    P.made_finals,\n    P.won_finals\nFROM \"mdsbox\".\"main\".\"reg_season_summary\" R\nLEFT JOIN \"mdsbox\".\"main\".\"playoff_summary\" P ON P.team = R.team\nLEFT JOIN \"mdsbox\".\"main\".\"ratings\" ratings ON ratings.team = R.team", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_summary": {"database": "mdsbox", "schema": "main", "name": "reg_season_summary", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/reg_season/reg_season_summary.sql", "original_file_path": "models/conformed/reg_season/reg_season_summary.sql", "unique_id": "model.nba_monte_carlo.reg_season_summary", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_summary"], "alias": "reg_season_summary", "checksum": {"name": "sha256", "checksum": "825272fe34808980f5bc57365ade080e00907ecc6b377c05c86a25d589d1b3d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/reg_season/reg_season_summary.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.278318, "relation_name": "\"mdsbox\".\"main\".\"reg_season_summary\"", "raw_code": "{{\n    config(materialized='external')\n}}\n\n    WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND made_play_in = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE made_play_in = 1) AS made_play_in,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM {{ ref( 'reg_season_end' ) }} E\n    LEFT JOIN {{ ref( 'vegas_wins' ) }} V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.made_play_in,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN {{ ref( 'reg_season_actuals' ) }} A ON A.team = C.team", "language": "sql", "refs": [["reg_season_end"], ["vegas_wins"], ["reg_season_actuals"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.vegas_wins", "model.nba_monte_carlo.reg_season_actuals"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_summary.sql", "compiled": true, "compiled_code": "\n\n    WITH cte_summary AS (\n    SELECT\n        winning_team AS team,\n        E.conf,\n        ROUND(AVG(wins),1) AS avg_wins,\n        V.win_total AS vegas_wins,\n        ROUND(AVG(V.win_total) - AVG(wins), 1) AS elo_vs_vegas,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_5th,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY wins ASC), 1) AS wins_95th,\n        COUNT(*) FILTER (WHERE made_playoffs = 1 AND made_play_in = 0) AS made_postseason,\n        COUNT(*) FILTER (WHERE made_play_in = 1) AS made_play_in,\n        ROUND(PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_5th,\n        ROUND(AVG(season_rank), 1) AS avg_seed,\n        ROUND(PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY season_rank ASC), 1) AS seed_95th\n    FROM \"mdsbox\".\"main\".\"reg_season_end\" E\n    LEFT JOIN \"mdsbox\".\"main\".\"vegas_wins\" V ON V.team = E.winning_team\n    GROUP BY ALL\n    )\n\nSELECT \n    C.team,\n    C.conf,\n    A.wins || ' - ' || A.losses AS record,\n    C.avg_wins,\n    C.vegas_wins,\n    c.elo_vs_vegas,\n    C.wins_5th || ' to ' || C.wins_95th AS win_range,\n    C.seed_5th || ' to ' || C.seed_95th AS seed_range,\n    c.made_postseason,\n    c.made_play_in,\n    0 AS sim_start_game_id\nFROM cte_summary C\nLEFT JOIN \"mdsbox\".\"main\".\"reg_season_actuals\" A ON A.team = C.team", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_simulator": {"database": "mdsbox", "schema": "main", "name": "reg_season_simulator", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/reg_season/reg_season_simulator.sql", "original_file_path": "models/conformed/reg_season/reg_season_simulator.sql", "unique_id": "model.nba_monte_carlo.reg_season_simulator", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_simulator"], "alias": "reg_season_simulator", "checksum": {"name": "sha256", "checksum": "3ff656df6f7e2818091e9ce9b95c2fbbefdc8ba428ecfe335d162f98a4fcf787"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/reg_season/reg_season_simulator.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.285036, "relation_name": "\"mdsbox\".\"main\".\"reg_season_simulator\"", "raw_code": "SELECT \n    R.scenario_id,\n    S.*,\n    {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN {{ elo_calc( 'S.home_team_elo_rating', 'S.visiting_team_elo_rating' ) }}  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM {{ ref( 'schedules' ) }} S\nLEFT JOIN {{ ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\nLEFT JOIN {{ ref( 'latest_results' ) }} LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "language": "sql", "refs": [["schedules"], ["random_num_gen"], ["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"], "nodes": ["model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_simulator.sql", "compiled": true, "compiled_code": "SELECT \n    R.scenario_id,\n    S.*,\n    ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN LR.include_actuals = true THEN LR.winning_team\n        WHEN ( 1 - (1 / (10 ^ (-( S.visiting_team_elo_rating - S.home_team_elo_rating - 70)::real/400)+1))) * 10000  >= R.rand_result THEN S.home_team\n        ELSE S.visiting_team\n    END AS winning_team,\n    COALESCE(LR.include_actuals, false) AS include_actuals\nFROM \"mdsbox\".\"main\".\"schedules\" S\nLEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\nLEFT JOIN \"mdsbox\".\"main\".\"latest_results\" LR ON LR.game_id = S.game_id\nWHERE S.type = 'reg_season'", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_predictions": {"database": "mdsbox", "schema": "main", "name": "reg_season_predictions", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/reg_season/reg_season_predictions.sql", "original_file_path": "models/conformed/reg_season/reg_season_predictions.sql", "unique_id": "model.nba_monte_carlo.reg_season_predictions", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_predictions"], "alias": "reg_season_predictions", "checksum": {"name": "sha256", "checksum": "e044228b927d968f8ca41db7e54db1f5008485e78f6e0c98e122c7e42ed81013"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/reg_season/reg_season_predictions.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.2921195, "relation_name": "\"mdsbox\".\"main\".\"reg_season_predictions\"", "raw_code": "SELECT \n    game_id,\n    home_team,\n    home_team_elo_rating,\n    visiting_team,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    {{ american_odds( 'home_team_win_probability/10000' ) }} AS american_odds\nFROM {{ ref( 'reg_season_simulator' ) }} S\n    GROUP BY ALL", "language": "sql", "refs": [["reg_season_simulator"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.american_odds"], "nodes": ["model.nba_monte_carlo.reg_season_simulator"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_predictions.sql", "compiled": true, "compiled_code": "SELECT \n    game_id,\n    home_team,\n    home_team_elo_rating,\n    visiting_team,\n    visiting_team_elo_rating,\n    home_team_win_probability,\n    winning_team,\n    include_actuals,\n    COUNT(*) AS occurances,\n    CASE WHEN home_team_win_probability/10000 >= 0.5 \n        THEN '-' || ROUND( home_team_win_probability/10000 / ( 1.0 - home_team_win_probability/10000 ) * 100 )::int\n        ELSE '+' || ((( 1.0 - home_team_win_probability/10000 ) / (home_team_win_probability/10000::real ) * 100)::int)\n    END AS american_odds\nFROM \"mdsbox\".\"main\".\"reg_season_simulator\" S\n    GROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_actuals_enriched": {"database": "mdsbox", "schema": "main", "name": "reg_season_actuals_enriched", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/reg_season/reg_season_actuals_enriched.sql", "original_file_path": "models/conformed/reg_season/reg_season_actuals_enriched.sql", "unique_id": "model.nba_monte_carlo.reg_season_actuals_enriched", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_actuals_enriched"], "alias": "reg_season_actuals_enriched", "checksum": {"name": "sha256", "checksum": "00d9e840d82dfbac9e471aa3f86feeeb16e6e7f1752296e79cf5ff83080911ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/reg_season/reg_season_actuals_enriched.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.2990258, "relation_name": "\"mdsbox\".\"main\".\"reg_season_actuals_enriched\"", "raw_code": "{{\n    config(materialized='external')\n}}\n\nWITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_favored_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'latest_results' ) }} LR\n    INNER JOIN {{ ref( 'prep_results_log' ) }} R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.winning_team\n    GROUP BY ALL\n),\n\ncte_favored_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'latest_results' ) }} LR\n    INNER JOIN {{ ref( 'prep_results_log' ) }} R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.losing_team\n    GROUP BY ALL\n),\n\ncte_avg_opponent_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'latest_results' ) }} LR\n    INNER JOIN {{ ref( 'prep_results_log' ) }} R ON R.game_id = LR.game_id\n        AND ( (LR.winning_team = R.home_team AND R.visiting_team_above_avg = 1)\n            OR (LR.winning_team = R.visiting_team AND R.home_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_avg_opponent_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'latest_results' ) }} LR\n    INNER JOIN {{ ref( 'prep_results_log' ) }} R ON R.game_id = LR.game_id\n        AND ( (LR.losing_team = R.visiting_team AND R.home_team_above_avg = 1)\n            OR (LR.losing_team = R.home_team AND R.visiting_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_home_wins AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'latest_results' ) }} LR\n    WHERE LR.home_team = LR.winning_team\n    GROUP BY ALL   \n),\n\ncte_home_losses AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'latest_results' ) }} LR\n    WHERE LR.home_team = LR.losing_team  \n    GROUP BY ALL  \n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses,\n    COALESCE(FW.wins, 0) AS wins_as_favorite,\n    COALESCE(FL.losses, 0) AS losses_as_favorite,\n    COALESCE(W.wins, 0) - COALESCE(FW.wins, 0) AS wins_as_underdog,\n    COALESCE(L.losses, 0) - COALESCE(FL.losses, 0) AS losses_as_underdog,\n    COALESCE(AW.wins,0) AS wins_vs_good_teams,\n    COALESCE(AL.losses,0) AS losses_vs_good_teams,\n    COALESCE(W.wins, 0) - COALESCE(AW.wins, 0) AS wins_vs_bad_teams,\n    COALESCE(L.losses, 0) - COALESCE(AL.losses, 0) AS losses_vs_bad_teams,\n    COALESCE(HW.wins,0) AS home_wins,\n    COALESCE(HL.losses,0) AS home_losses,\n    COALESCE(W.wins, 0) - COALESCE(HW.wins, 0) AS away_wins,\n    COALESCE(L.losses, 0) - COALESCE(HL.losses, 0) AS away_losses\nFROM {{ ref( 'teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team\nLEFT JOIN cte_losses L ON L.losing_team = T.Team\nLEFT JOIN cte_favored_wins FW ON FW.winning_team = T.team\nLEFT JOIN cte_favored_losses FL ON FL.losing_team = T.Team\nLEFT JOIN cte_avg_opponent_wins AW ON AW.winning_team = T.Team\nLEFT JOIN cte_avg_opponent_losses AL ON AL.losing_team = T.team\nLEFT JOIN cte_home_wins HW ON HW.home_team = T.Team\nLEFT JOIN cte_home_losses HL ON HL.home_team = T.Team", "language": "sql", "refs": [["latest_results"], ["latest_results"], ["latest_results"], ["prep_results_log"], ["latest_results"], ["prep_results_log"], ["latest_results"], ["prep_results_log"], ["latest_results"], ["prep_results_log"], ["latest_results"], ["latest_results"], ["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_actuals_enriched.sql", "compiled": true, "compiled_code": "\n\nWITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"latest_results\"\n    GROUP BY ALL\n),\n\ncte_favored_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"prep_results_log\" R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.winning_team\n    GROUP BY ALL\n),\n\ncte_favored_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"prep_results_log\" R ON R.game_id = LR.game_id\n        AND R.favored_team = LR.losing_team\n    GROUP BY ALL\n),\n\ncte_avg_opponent_wins AS (\n    SELECT \n        LR.winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"prep_results_log\" R ON R.game_id = LR.game_id\n        AND ( (LR.winning_team = R.home_team AND R.visiting_team_above_avg = 1)\n            OR (LR.winning_team = R.visiting_team AND R.home_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_avg_opponent_losses AS (\n    SELECT \n        LR.losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"latest_results\" LR\n    INNER JOIN \"mdsbox\".\"main\".\"prep_results_log\" R ON R.game_id = LR.game_id\n        AND ( (LR.losing_team = R.visiting_team AND R.home_team_above_avg = 1)\n            OR (LR.losing_team = R.home_team AND R.visiting_team_above_avg = 1) )\n    GROUP BY ALL\n),\n\ncte_home_wins AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"latest_results\" LR\n    WHERE LR.home_team = LR.winning_team\n    GROUP BY ALL   \n),\n\ncte_home_losses AS (\n    SELECT \n        LR.home_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"latest_results\" LR\n    WHERE LR.home_team = LR.losing_team  \n    GROUP BY ALL  \n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses,\n    COALESCE(FW.wins, 0) AS wins_as_favorite,\n    COALESCE(FL.losses, 0) AS losses_as_favorite,\n    COALESCE(W.wins, 0) - COALESCE(FW.wins, 0) AS wins_as_underdog,\n    COALESCE(L.losses, 0) - COALESCE(FL.losses, 0) AS losses_as_underdog,\n    COALESCE(AW.wins,0) AS wins_vs_good_teams,\n    COALESCE(AL.losses,0) AS losses_vs_good_teams,\n    COALESCE(W.wins, 0) - COALESCE(AW.wins, 0) AS wins_vs_bad_teams,\n    COALESCE(L.losses, 0) - COALESCE(AL.losses, 0) AS losses_vs_bad_teams,\n    COALESCE(HW.wins,0) AS home_wins,\n    COALESCE(HL.losses,0) AS home_losses,\n    COALESCE(W.wins, 0) - COALESCE(HW.wins, 0) AS away_wins,\n    COALESCE(L.losses, 0) - COALESCE(HL.losses, 0) AS away_losses\nFROM \"mdsbox\".\"main\".\"teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team\nLEFT JOIN cte_losses L ON L.losing_team = T.Team\nLEFT JOIN cte_favored_wins FW ON FW.winning_team = T.team\nLEFT JOIN cte_favored_losses FL ON FL.losing_team = T.Team\nLEFT JOIN cte_avg_opponent_wins AW ON AW.winning_team = T.Team\nLEFT JOIN cte_avg_opponent_losses AL ON AL.losing_team = T.team\nLEFT JOIN cte_home_wins HW ON HW.home_team = T.Team\nLEFT JOIN cte_home_losses HL ON HL.home_team = T.Team", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_actuals": {"database": "mdsbox", "schema": "main", "name": "reg_season_actuals", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/reg_season/reg_season_actuals.sql", "original_file_path": "models/conformed/reg_season/reg_season_actuals.sql", "unique_id": "model.nba_monte_carlo.reg_season_actuals", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_actuals"], "alias": "reg_season_actuals", "checksum": {"name": "sha256", "checksum": "4fb625c85c29dcf10cddaae9eea12bcf5509e1b6b62cb9c0ff8fb837936ea5af"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/reg_season/reg_season_actuals.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.3024874, "relation_name": "\"mdsbox\".\"main\".\"reg_season_actuals\"", "raw_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM {{ ref( 'latest_results' ) }}\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM {{ ref( 'latest_results' ) }}\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM {{ ref( 'teams' ) }} T\nLEFT JOIN cte_wins W ON W.winning_team = T.team\nLEFT JOIN cte_losses L ON L.losing_team = T.Team", "language": "sql", "refs": [["latest_results"], ["latest_results"], ["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_actuals.sql", "compiled": true, "compiled_code": "WITH cte_wins AS (\n    SELECT \n        winning_team,\n        COUNT(*) as wins\n    FROM \"mdsbox\".\"main\".\"latest_results\"\n    GROUP BY ALL\n),\n\ncte_losses AS (\n    SELECT \n        losing_team,\n        COUNT(*) as losses\n    FROM \"mdsbox\".\"main\".\"latest_results\"\n    GROUP BY ALL\n)\n\nSELECT\n    T.team,\n    COALESCE(W.wins, 0) AS wins,\n    COALESCE(L.losses, 0) AS losses\nFROM \"mdsbox\".\"main\".\"teams\" T\nLEFT JOIN cte_wins W ON W.winning_team = T.team\nLEFT JOIN cte_losses L ON L.losing_team = T.Team", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_end": {"database": "mdsbox", "schema": "main", "name": "reg_season_end", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/reg_season/reg_season_end.sql", "original_file_path": "models/conformed/reg_season/reg_season_end.sql", "unique_id": "model.nba_monte_carlo.reg_season_end", "fqn": ["nba_monte_carlo", "conformed", "reg_season", "reg_season_end"], "alias": "reg_season_end", "checksum": {"name": "sha256", "checksum": "d15bca6c97cdcba086bb0ad1f07cff546b88a5faa4b811b9d824e2a212183eac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "external", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/reg_season/reg_season_end.sql", "deferred": false, "unrendered_config": {"materialized": "external"}, "created_at": 1678502497.3054335, "relation_name": "\"mdsbox\".\"main\".\"reg_season_end\"", "raw_code": "{{ \n    config(materialized='external')\n}}\n\nWITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating,\n        COUNT(*) AS wins\n    FROM {{ ref( 'reg_season_simulator' ) }} S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank <= 10 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        CASE\n            WHEN season_rank BETWEEN 7 AND 10 THEN 1\n            ELSE 0\n        END AS made_play_in,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    *,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM cte_made_playoffs", "language": "sql", "refs": [["reg_season_simulator"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_simulator"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/reg_season/reg_season_end.sql", "compiled": true, "compiled_code": "\n\nWITH cte_wins AS (\n    SELECT\n        S.scenario_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_conf\n            ELSE S.visiting_conf\n        END AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS elo_rating,\n        COUNT(*) AS wins\n    FROM \"mdsbox\".\"main\".\"reg_season_simulator\" S\n    GROUP BY ALL\n),\n\ncte_ranked_wins AS (\n    SELECT\n        *,\n        --no tiebreaker, so however row number handles order ties will need to be dealt with\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, conf ORDER BY wins DESC, winning_team DESC ) AS season_rank\n    FROM cte_wins\n\n),\n\ncte_made_playoffs AS (\n    SELECT\n        *,\n        CASE\n            WHEN season_rank <= 10 THEN 1\n            ELSE 0\n        END AS made_playoffs,\n        CASE\n            WHEN season_rank BETWEEN 7 AND 10 THEN 1\n            ELSE 0\n        END AS made_play_in,\n        conf || '-' || season_rank::text AS seed\n    FROM cte_ranked_wins\n)\n\nSELECT \n    *,\n    0 AS sim_start_game_id\nFROM cte_made_playoffs", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.reg_season_schedule": {"database": "mdsbox", "schema": "main", "name": "reg_season_schedule", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/reg_season_schedule.sql", "original_file_path": "models/conformed/inputs/reg_season_schedule.sql", "unique_id": "model.nba_monte_carlo.reg_season_schedule", "fqn": ["nba_monte_carlo", "conformed", "inputs", "reg_season_schedule"], "alias": "reg_season_schedule", "checksum": {"name": "sha256", "checksum": "e92e0989d6f0eaf2c05091675902f9d22eb17a06a766db0e3562e0e857884627"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/reg_season_schedule.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.481323, "relation_name": "\"mdsbox\".\"main\".\"reg_season_schedule\"", "raw_code": "SELECT\n    (S._smart_source_lineno - 1)::int AS game_id,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    V.elo_rating::int AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    H.elo_rating::int AS home_team_elo_rating\nFROM {{ ref( 'prep_nba_elo_latest' ) }} AS S\nLEFT JOIN {{ ref( 'ratings' ) }} V ON V.team = S.team2\nLEFT JOIN {{ ref( 'ratings' ) }} H ON H.team = S.team1\nGROUP BY ALL", "language": "sql", "refs": [["prep_nba_elo_latest"], ["ratings"], ["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.ratings", "model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/reg_season_schedule.sql", "compiled": true, "compiled_code": "SELECT\n    (S._smart_source_lineno - 1)::int AS game_id,\n    'reg_season' AS type,\n    0 as series_id,\n    V.conf AS visiting_conf,\n    V.team AS visiting_team,\n    V.elo_rating::int AS visiting_team_elo_rating,\n    H.conf AS home_conf,\n    H.team AS home_team,\n    H.elo_rating::int AS home_team_elo_rating\nFROM \"mdsbox\".\"main\".\"prep_nba_elo_latest\" AS S\nLEFT JOIN \"mdsbox\".\"main\".\"ratings\" V ON V.team = S.team2\nLEFT JOIN \"mdsbox\".\"main\".\"ratings\" H ON H.team = S.team1\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.random_num_gen": {"database": "mdsbox", "schema": "main", "name": "random_num_gen", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/random_num_gen.sql", "original_file_path": "models/conformed/inputs/random_num_gen.sql", "unique_id": "model.nba_monte_carlo.random_num_gen", "fqn": ["nba_monte_carlo", "conformed", "inputs", "random_num_gen"], "alias": "random_num_gen", "checksum": {"name": "sha256", "checksum": "d8703ca1f8f16255d97399627ca16bd60797b0f881cba1318839e35cc7e7e3a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/random_num_gen.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1678502497.4819224, "relation_name": "\"mdsbox\".\"main\".\"random_num_gen\"", "raw_code": "{{ \n    config(\n        materialized='table'\n) }}\n\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM {{ ref( 'scenario_gen' ) }} AS i\nCROSS JOIN {{ ref( 'schedules' ) }} AS S", "language": "sql", "refs": [["scenario_gen"], ["schedules"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.scenario_gen", "model.nba_monte_carlo.schedules"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/random_num_gen.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    i.scenario_id,\n    S.game_id,\n    (random() * 10000)::smallint AS rand_result,\n    0 AS sim_start_game_id\nFROM \"mdsbox\".\"main\".\"scenario_gen\" AS i\nCROSS JOIN \"mdsbox\".\"main\".\"schedules\" AS S", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.schedules": {"database": "mdsbox", "schema": "main", "name": "schedules", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/schedules.sql", "original_file_path": "models/conformed/inputs/schedules.sql", "unique_id": "model.nba_monte_carlo.schedules", "fqn": ["nba_monte_carlo", "conformed", "inputs", "schedules"], "alias": "schedules", "checksum": {"name": "sha256", "checksum": "c437a352b73c2435b3f6658ff22102d58b609a5e661e6a196948c366b634d070"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_conf": {"name": "visiting_conf", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team_elo_rating": {"name": "visiting_team_elo_rating", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_conf": {"name": "home_conf", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_elo_rating": {"name": "home_team_elo_rating", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/schedules.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.47779, "relation_name": "\"mdsbox\".\"main\".\"schedules\"", "raw_code": "SELECT\n    *\nFROM {{ ref( 'reg_season_schedule' ) }}\nUNION ALL\nSELECT\n    *\nFROM {{ ref( 'post_season_schedule' ) }}", "language": "sql", "refs": [["reg_season_schedule"], ["post_season_schedule"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.reg_season_schedule", "model.nba_monte_carlo.post_season_schedule"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/schedules.sql", "compiled": true, "compiled_code": "SELECT\n    *\nFROM \"mdsbox\".\"main\".\"reg_season_schedule\"\nUNION ALL\nSELECT\n    *\nFROM \"mdsbox\".\"main\".\"post_season_schedule\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.xf_series_to_seed": {"database": "mdsbox", "schema": "main", "name": "xf_series_to_seed", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/xf_series_to_seed.sql", "original_file_path": "models/conformed/inputs/xf_series_to_seed.sql", "unique_id": "model.nba_monte_carlo.xf_series_to_seed", "fqn": ["nba_monte_carlo", "conformed", "inputs", "xf_series_to_seed"], "alias": "xf_series_to_seed", "checksum": {"name": "sha256", "checksum": "d33b55b9cfe3bb728bf6dcbf5d2879ec6d07af7f99b8bf030a7ab416cf30052c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"series_id": {"name": "series_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed": {"name": "seed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/xf_series_to_seed.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.487398, "relation_name": "\"mdsbox\".\"main\".\"xf_series_to_seed\"", "raw_code": "SELECT\n    series_id,\n    seed\nFROM {{ ref( 'prep_xf_series_to_seed' ) }}", "language": "sql", "refs": [["prep_xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/xf_series_to_seed.sql", "compiled": true, "compiled_code": "SELECT\n    series_id,\n    seed\nFROM \"mdsbox\".\"main\".\"prep_xf_series_to_seed\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.teams": {"database": "mdsbox", "schema": "main", "name": "teams", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/teams.sql", "original_file_path": "models/conformed/inputs/teams.sql", "unique_id": "model.nba_monte_carlo.teams", "fqn": ["nba_monte_carlo", "conformed", "inputs", "teams"], "alias": "teams", "checksum": {"name": "sha256", "checksum": "08a130dc214d3d72fe1b7be184a28aeec58773f233b149e1c833a1b17c4fdcb4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/teams.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.4839034, "relation_name": "\"mdsbox\".\"main\".\"teams\"", "raw_code": "SELECT\n    S.visitorneutral AS team_long,\n    R.team\nFROM {{ ref( 'prep_schedule' ) }} S\nLEFT JOIN {{ ref( 'ratings' ) }} AS R ON R.team_long = S.visitorneutral\nWHERE R.team IS NOT NULL\nGROUP BY ALL", "language": "sql", "refs": [["prep_schedule"], ["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_schedule", "model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/teams.sql", "compiled": true, "compiled_code": "SELECT\n    S.visitorneutral AS team_long,\n    R.team\nFROM \"mdsbox\".\"main\".\"prep_schedule\" S\nLEFT JOIN \"mdsbox\".\"main\".\"ratings\" AS R ON R.team_long = S.visitorneutral\nWHERE R.team IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.post_season_schedule": {"database": "mdsbox", "schema": "main", "name": "post_season_schedule", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/post_season_schedule.sql", "original_file_path": "models/conformed/inputs/post_season_schedule.sql", "unique_id": "model.nba_monte_carlo.post_season_schedule", "fqn": ["nba_monte_carlo", "conformed", "inputs", "post_season_schedule"], "alias": "post_season_schedule", "checksum": {"name": "sha256", "checksum": "5578381c222b332f7711796a871d530ef367ca9aaf71a6ad77f127ddeb66951c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/post_season_schedule.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.4807315, "relation_name": "\"mdsbox\".\"main\".\"post_season_schedule\"", "raw_code": "SELECT\n    S.key::int AS game_id,\n    S.type,\n    S.series_id,\n    NULL AS visiting_conf,\n    S.visitorneutral AS visiting_team,\n    NULL AS visiting_team_elo_rating,\n    NULL AS home_conf,\n    S.homeneutral AS home_team,\n    NULL AS home_team_elo_rating\nFROM {{ ref( 'prep_schedule' ) }} AS S\nWHERE S.type <> 'reg_season'\nGROUP BY ALL", "language": "sql", "refs": [["prep_schedule"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_schedule"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/post_season_schedule.sql", "compiled": true, "compiled_code": "SELECT\n    S.key::int AS game_id,\n    S.type,\n    S.series_id,\n    NULL AS visiting_conf,\n    S.visitorneutral AS visiting_team,\n    NULL AS visiting_team_elo_rating,\n    NULL AS home_conf,\n    S.homeneutral AS home_team,\n    NULL AS home_team_elo_rating\nFROM \"mdsbox\".\"main\".\"prep_schedule\" AS S\nWHERE S.type <> 'reg_season'\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.vegas_wins": {"database": "mdsbox", "schema": "main", "name": "vegas_wins", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/vegas_wins.sql", "original_file_path": "models/conformed/inputs/vegas_wins.sql", "unique_id": "model.nba_monte_carlo.vegas_wins", "fqn": ["nba_monte_carlo", "conformed", "inputs", "vegas_wins"], "alias": "vegas_wins", "checksum": {"name": "sha256", "checksum": "b4cb11501cce3602c23c6c6c8c3ef8dbb2abf46f76b90447ae206682bec21a8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "win_total": {"name": "win_total", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/vegas_wins.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.4852836, "relation_name": "\"mdsbox\".\"main\".\"vegas_wins\"", "raw_code": "SELECT\n    team,\n    win_total\nFROM {{ ref( 'ratings' ) }}\nGROUP BY ALL", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/vegas_wins.sql", "compiled": true, "compiled_code": "SELECT\n    team,\n    win_total\nFROM \"mdsbox\".\"main\".\"ratings\"\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.ratings": {"database": "mdsbox", "schema": "main", "name": "ratings", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/ratings.sql", "original_file_path": "models/conformed/inputs/ratings.sql", "unique_id": "model.nba_monte_carlo.ratings", "fqn": ["nba_monte_carlo", "conformed", "inputs", "ratings"], "alias": "ratings", "checksum": {"name": "sha256", "checksum": "ce296eeca17294bab195933156800fd28170bf3da54e0e0f5861ac44672b6a32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"team": {"name": "team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_long": {"name": "team_long", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conf": {"name": "conf", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "elo_rating": {"name": "elo_rating", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/ratings.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.4801574, "relation_name": "\"mdsbox\".\"main\".\"ratings\"", "raw_code": "SELECT\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM {{ ref( 'prep_team_ratings' ) }} orig\nLEFT JOIN {{ ref( 'prep_elo_post' ) }} latest ON latest.team = orig.team\nGROUP BY ALL", "language": "sql", "refs": [["prep_team_ratings"], ["prep_elo_post"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_team_ratings", "model.nba_monte_carlo.prep_elo_post"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/ratings.sql", "compiled": true, "compiled_code": "SELECT\n    orig.team,\n    orig.team_long,\n    orig.conf,\n    CASE\n        WHEN latest.latest_ratings = true AND latest.elo_rating IS NOT NULL THEN latest.elo_rating\n        ELSE orig.elo_rating\n    END AS elo_rating,\n    orig.elo_rating AS original_rating,\n    orig.win_total\nFROM \"mdsbox\".\"main\".\"prep_team_ratings\" orig\nLEFT JOIN \"mdsbox\".\"main\".\"prep_elo_post\" latest ON latest.team = orig.team\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.latest_results": {"database": "mdsbox", "schema": "main", "name": "latest_results", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/latest_results.sql", "original_file_path": "models/conformed/inputs/latest_results.sql", "unique_id": "model.nba_monte_carlo.latest_results", "fqn": ["nba_monte_carlo", "conformed", "inputs", "latest_results"], "alias": "latest_results", "checksum": {"name": "sha256", "checksum": "e9ede0a3c04068fae392b2a54910ab7251355f0b27e3ecaa89c4d94ddea2128f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"game_id": {"name": "game_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team": {"name": "home_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_team_score": {"name": "home_team_score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team": {"name": "visiting_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visiting_team_score": {"name": "visiting_team_score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "winning_team": {"name": "winning_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "losing_team": {"name": "losing_team", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/latest_results.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.4740114, "relation_name": "\"mdsbox\".\"main\".\"latest_results\"", "raw_code": "SELECT\n    (_smart_source_lineno - 1)::int AS game_id,\n    team1 AS home_team, \n    score1 AS home_team_score,\n    team2 AS visiting_team,\n    score2 AS visiting_team_score,\n    date,\n    CASE \n        WHEN score1 > score2 THEN team1\n        ELSE team2\n    END AS winning_team,\n    CASE \n        WHEN score1 > score2 THEN team2\n        ELSE team1\n    END AS losing_team,\n    {{ var('include_actuals') }} AS include_actuals\nFROM {{ ref( 'prep_nba_elo_latest' ) }}\nWHERE score1 IS NOT NULL\nGROUP BY ALL", "language": "sql", "refs": [["prep_nba_elo_latest"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/latest_results.sql", "compiled": true, "compiled_code": "SELECT\n    (_smart_source_lineno - 1)::int AS game_id,\n    team1 AS home_team, \n    score1 AS home_team_score,\n    team2 AS visiting_team,\n    score2 AS visiting_team_score,\n    date,\n    CASE \n        WHEN score1 > score2 THEN team1\n        ELSE team2\n    END AS winning_team,\n    CASE \n        WHEN score1 > score2 THEN team2\n        ELSE team1\n    END AS losing_team,\n    True AS include_actuals\nFROM \"mdsbox\".\"main\".\"prep_nba_elo_latest\"\nWHERE score1 IS NOT NULL\nGROUP BY ALL", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.scenario_gen": {"database": "mdsbox", "schema": "main", "name": "scenario_gen", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/inputs/scenario_gen.sql", "original_file_path": "models/conformed/inputs/scenario_gen.sql", "unique_id": "model.nba_monte_carlo.scenario_gen", "fqn": ["nba_monte_carlo", "conformed", "inputs", "scenario_gen"], "alias": "scenario_gen", "checksum": {"name": "sha256", "checksum": "efb60ac8122e24530a8fd7a7587c7fe75b70884d9554ccb6902293e12cf365df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "nba_monte_carlo://models/_docs.yml", "build_path": "../docs/run/nba_monte_carlo/models/conformed/inputs/scenario_gen.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.4825346, "relation_name": "\"mdsbox\".\"main\".\"scenario_gen\"", "raw_code": "SELECT I.generate_series AS scenario_id\nFROM generate_series(1, {{ var( 'scenarios' ) }} ) AS I", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/inputs/scenario_gen.sql", "compiled": true, "compiled_code": "SELECT I.generate_series AS scenario_id\nFROM generate_series(1, 10000 ) AS I", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playin_sim_r2_end": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r2_end", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playin/playin_sim_r2_end.sql", "original_file_path": "models/conformed/playin/playin_sim_r2_end.sql", "unique_id": "model.nba_monte_carlo.playin_sim_r2_end", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r2_end"], "alias": "playin_sim_r2_end", "checksum": {"name": "sha256", "checksum": "2dc4041cb85c20b88cdebb5f9e48a4283d36a8200b0b195050eca6df87c5fbf2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playin/playin_sim_r2_end.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.3508794, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r2_end\"", "raw_code": "SELECT\n    P1.scenario_id,\n    P1.conf,\n    P1.winning_team,\n    P1.conf || '-7' AS seed,\n    P1.winning_team_elo_rating\nFROM {{ ref( 'playin_sim_r1_end' ) }} P1\nWHERE P1.result = 'winner advance'\nUNION ALL\nSELECT\n    P2.scenario_id,\n    P2.conf AS conf,\n    P2.winning_team,\n    P2.conf || '-8' AS seed,\n    CASE\n        WHEN P2.winning_team = P2.home_team THEN P2.home_team_elo_rating\n        ELSE P2.visiting_team_elo_rating\n    END AS elo_rating\nFROM {{ ref( 'playin_sim_r2' ) }} P2", "language": "sql", "refs": [["playin_sim_r1_end"], ["playin_sim_r2"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r2"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r2_end.sql", "compiled": true, "compiled_code": "SELECT\n    P1.scenario_id,\n    P1.conf,\n    P1.winning_team,\n    P1.conf || '-7' AS seed,\n    P1.winning_team_elo_rating\nFROM \"mdsbox\".\"main\".\"playin_sim_r1_end\" P1\nWHERE P1.result = 'winner advance'\nUNION ALL\nSELECT\n    P2.scenario_id,\n    P2.conf AS conf,\n    P2.winning_team,\n    P2.conf || '-8' AS seed,\n    CASE\n        WHEN P2.winning_team = P2.home_team THEN P2.home_team_elo_rating\n        ELSE P2.visiting_team_elo_rating\n    END AS elo_rating\nFROM \"mdsbox\".\"main\".\"playin_sim_r2\" P2", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playin_sim_r2": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r2", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playin/playin_sim_r2.sql", "original_file_path": "models/conformed/playin/playin_sim_r2.sql", "unique_id": "model.nba_monte_carlo.playin_sim_r2", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r2"], "alias": "playin_sim_r2", "checksum": {"name": "sha256", "checksum": "5c87e4d41016faa8d8019b0448773aabdf2bc552ac2f40ba8571f51b2ad5a9d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playin/playin_sim_r2.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.3538005, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r2\"", "raw_code": "SELECT \n    R.scenario_id,\n    S.game_id,\n    S.home_team[7:] AS home_team_id,\n    S.visiting_team[8:] AS visiting_team_id,\n    EV.conf AS conf,\n    EV.remaining_team AS visiting_team,\n    EV.winning_team_elo_rating AS visiting_team_elo_rating,\n    EH.remaining_team AS home_team,\n    EH.losing_team_elo_rating AS home_team_elo_rating,\n    {{ elo_calc( 'EH.losing_team_elo_rating', 'EV.winning_team_elo_rating' ) }} as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN {{ elo_calc( 'EH.losing_team_elo_rating', 'EV.winning_team_elo_rating' ) }} >= R.rand_result THEN EH.remaining_team\n        ELSE EV.remaining_team\n    END AS winning_team \nFROM {{ ref( 'schedules' ) }} S\n    LEFT JOIN {{ ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN {{ ref( 'playin_sim_r1_end' ) }} EH ON R.scenario_id = EH.scenario_id AND EH.game_id = S.home_team[7:]\n    LEFT JOIN {{ ref( 'playin_sim_r1_end' ) }} EV ON R.scenario_id = EV.scenario_id AND EV.game_id = S.visiting_team[8:]\nWHERE S.type = 'playin_r2'", "language": "sql", "refs": [["schedules"], ["random_num_gen"], ["playin_sim_r1_end"], ["playin_sim_r1_end"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"], "nodes": ["model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r1_end"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r2.sql", "compiled": true, "compiled_code": "SELECT \n    R.scenario_id,\n    S.game_id,\n    S.home_team[7:] AS home_team_id,\n    S.visiting_team[8:] AS visiting_team_id,\n    EV.conf AS conf,\n    EV.remaining_team AS visiting_team,\n    EV.winning_team_elo_rating AS visiting_team_elo_rating,\n    EH.remaining_team AS home_team,\n    EH.losing_team_elo_rating AS home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 70)::real/400)+1))) * 10000 as home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN ( 1 - (1 / (10 ^ (-( EV.winning_team_elo_rating - EH.losing_team_elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.remaining_team\n        ELSE EV.remaining_team\n    END AS winning_team \nFROM \"mdsbox\".\"main\".\"schedules\" S\n    LEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN \"mdsbox\".\"main\".\"playin_sim_r1_end\" EH ON R.scenario_id = EH.scenario_id AND EH.game_id = S.home_team[7:]\n    LEFT JOIN \"mdsbox\".\"main\".\"playin_sim_r1_end\" EV ON R.scenario_id = EV.scenario_id AND EV.game_id = S.visiting_team[8:]\nWHERE S.type = 'playin_r2'", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playin_sim_r1": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r1", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playin/playin_sim_r1.sql", "original_file_path": "models/conformed/playin/playin_sim_r1.sql", "unique_id": "model.nba_monte_carlo.playin_sim_r1", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r1"], "alias": "playin_sim_r1", "checksum": {"name": "sha256", "checksum": "1f0c81ec65ecab03915ab32c889d97a9e969c33af84344e34d8170475bfccdb9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playin/playin_sim_r1.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.3608778, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r1\"", "raw_code": "SELECT\n    R.scenario_id,\n    S.game_id,\n    EV.conf AS conf,\n    EV.winning_team AS visiting_team,\n    EV.elo_rating AS visiting_team_elo_rating,\n    EH.winning_team AS home_team,\n    EH.elo_rating AS home_team_elo_rating,\n    {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating' ) }} AS home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating' ) }} >= R.rand_result THEN EH.winning_team\n        ELSE EV.winning_team\n    END AS winning_team \nFROM {{ ref( 'schedules' ) }} S\n    LEFT JOIN {{ ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN {{ ref( 'reg_season_end' ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN {{ ref( 'reg_season_end' ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\nWHERE S.type = 'playin_r1'", "language": "sql", "refs": [["schedules"], ["random_num_gen"], ["reg_season_end"], ["reg_season_end"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"], "nodes": ["model.nba_monte_carlo.schedules", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r1.sql", "compiled": true, "compiled_code": "SELECT\n    R.scenario_id,\n    S.game_id,\n    EV.conf AS conf,\n    EV.winning_team AS visiting_team,\n    EV.elo_rating AS visiting_team_elo_rating,\n    EH.winning_team AS home_team,\n    EH.elo_rating AS home_team_elo_rating,\n    ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 AS home_team_win_probability,\n    R.rand_result,\n    CASE \n        WHEN ( 1 - (1 / (10 ^ (-( EV.elo_rating - EH.elo_rating - 70)::real/400)+1))) * 10000 >= R.rand_result THEN EH.winning_team\n        ELSE EV.winning_team\n    END AS winning_team \nFROM \"mdsbox\".\"main\".\"schedules\" S\n    LEFT JOIN \"mdsbox\".\"main\".\"random_num_gen\" R ON R.game_id = S.game_id\n    LEFT JOIN \"mdsbox\".\"main\".\"reg_season_end\" EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN \"mdsbox\".\"main\".\"reg_season_end\" EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\nWHERE S.type = 'playin_r1'", "extra_ctes_injected": true, "extra_ctes": []}, "model.nba_monte_carlo.playin_sim_r1_end": {"database": "mdsbox", "schema": "main", "name": "playin_sim_r1_end", "resource_type": "model", "package_name": "nba_monte_carlo", "path": "conformed/playin/playin_sim_r1_end.sql", "original_file_path": "models/conformed/playin/playin_sim_r1_end.sql", "unique_id": "model.nba_monte_carlo.playin_sim_r1_end", "fqn": ["nba_monte_carlo", "conformed", "playin", "playin_sim_r1_end"], "alias": "playin_sim_r1_end", "checksum": {"name": "sha256", "checksum": "8bdd3689401073f48845b6e04820500a305b45a81ea85697a3257bc356a969bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/conformed/playin/playin_sim_r1_end.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1678502497.367852, "relation_name": "\"mdsbox\".\"main\".\"playin_sim_r1_end\"", "raw_code": "WITH cte_playin_details AS (\n    SELECT\n        S.scenario_id,\n        S.game_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS winning_team_elo_rating,\n        S.conf AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team\n            ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team_elo_rating\n            ELSE S.home_team_elo_rating\n        END AS losing_team_elo_rating,\n        CASE\n            WHEN S.game_id IN (1231, 1234) THEN 'winner advance'\n            WHEN S.game_id IN (1232, 1235) THEN 'loser eliminated'\n        END AS result\n    FROM {{ ref( 'playin_sim_r1' ) }} S\n)\n\nSELECT\n    *,\n    CASE\n        WHEN game_id IN (1231, 1234) THEN losing_team\n        WHEN game_id IN (1232, 1235) THEN winning_team\n    END AS remaining_team\nFROM cte_playin_details", "language": "sql", "refs": [["playin_sim_r1"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.nba_monte_carlo.playin_sim_r1"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/conformed/playin/playin_sim_r1_end.sql", "compiled": true, "compiled_code": "WITH cte_playin_details AS (\n    SELECT\n        S.scenario_id,\n        S.game_id,\n        S.winning_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.home_team_elo_rating\n            ELSE S.visiting_team_elo_rating\n        END AS winning_team_elo_rating,\n        S.conf AS conf,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team\n            ELSE S.home_team\n        END AS losing_team,\n        CASE\n            WHEN S.winning_team = S.home_team THEN S.visiting_team_elo_rating\n            ELSE S.home_team_elo_rating\n        END AS losing_team_elo_rating,\n        CASE\n            WHEN S.game_id IN (1231, 1234) THEN 'winner advance'\n            WHEN S.game_id IN (1232, 1235) THEN 'loser eliminated'\n        END AS result\n    FROM \"mdsbox\".\"main\".\"playin_sim_r1\" S\n)\n\nSELECT\n    *,\n    CASE\n        WHEN game_id IN (1231, 1234) THEN losing_team\n        WHEN game_id IN (1232, 1235) THEN winning_team\n    END AS remaining_team\nFROM cte_playin_details", "extra_ctes_injected": true, "extra_ctes": []}, "operation.nba_monte_carlo.nba_monte_carlo-on-run-end-0": {"database": "mdsbox", "schema": "main", "name": "nba_monte_carlo-on-run-end-0", "resource_type": "operation", "package_name": "nba_monte_carlo", "path": "hooks/nba_monte_carlo-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.nba_monte_carlo.nba_monte_carlo-on-run-end-0", "fqn": ["nba_monte_carlo", "hooks", "nba_monte_carlo-on-run-end-0"], "alias": "nba_monte_carlo-on-run-end-0", "checksum": {"name": "sha256", "checksum": "e49216e32391b49f5f8528385a016343339e2884255fe28c301245f5b58bd017"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1678502497.3797762, "relation_name": null, "raw_code": "{{ export_to_parquet( var('enable_export') ) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.export_to_parquet"], "nodes": []}, "compiled_path": "../docs/compiled/nba_monte_carlo/./dbt_project.yml/hooks/nba_monte_carlo-on-run-end-0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}, "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_nba_elo_latest')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_prep_nba_elo_latest_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_prep_nba_elo_latest_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6", "fqn": ["nba_monte_carlo", "empty_table_prep_nba_elo_latest_"], "alias": "empty_table_prep_nba_elo_latest_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_prep_nba_elo_latest_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.4963834, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["prep_nba_elo_latest"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.prep_nba_elo_latest"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_nba_elo_latest_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"prep_nba_elo_latest\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.prep_nba_elo_latest"}, "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_prep_schedule_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_prep_schedule_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc", "fqn": ["nba_monte_carlo", "empty_table_prep_schedule_"], "alias": "empty_table_prep_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_prep_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.504742, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["prep_schedule"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.prep_schedule"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"prep_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.prep_schedule"}, "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_team_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_prep_team_ratings_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_prep_team_ratings_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2", "fqn": ["nba_monte_carlo", "empty_table_prep_team_ratings_"], "alias": "empty_table_prep_team_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_prep_team_ratings_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5088115, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["prep_team_ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.prep_team_ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_team_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"prep_team_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.prep_team_ratings"}, "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_prep_xf_series_to_seed_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_prep_xf_series_to_seed_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5", "fqn": ["nba_monte_carlo", "empty_table_prep_xf_series_to_seed_"], "alias": "empty_table_prep_xf_series_to_seed_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_prep_xf_series_to_seed_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5128648, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["prep_xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.prep_xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_xf_series_to_seed_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"prep_xf_series_to_seed\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.prep_xf_series_to_seed"}, "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('prep_latest_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_prep_latest_ratings_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_prep_latest_ratings_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca", "fqn": ["nba_monte_carlo", "unique_prep_latest_ratings_team"], "alias": "unique_prep_latest_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_prep_latest_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.516772, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["prep_latest_ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.prep_latest_ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_prep_latest_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"prep_latest_ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.prep_latest_ratings"}, "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('prep_latest_ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_prep_latest_ratings_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_prep_latest_ratings_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15", "fqn": ["nba_monte_carlo", "empty_table_prep_latest_ratings_"], "alias": "empty_table_prep_latest_ratings_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_prep_latest_ratings_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5190837, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["prep_latest_ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.prep_latest_ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_prep_latest_ratings_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"prep_latest_ratings\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.prep_latest_ratings"}, "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_latest_results_game_id", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_latest_results_game_id.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270", "fqn": ["nba_monte_carlo", "unique_latest_results_game_id"], "alias": "unique_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_latest_results_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.523682, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_latest_results_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "game_id", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_game_id", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_game_id.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628", "fqn": ["nba_monte_carlo", "not_null_latest_results_game_id"], "alias": "not_null_latest_results_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5257344, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "game_id", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_home_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_home_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704", "fqn": ["nba_monte_carlo", "not_null_latest_results_home_team"], "alias": "not_null_latest_results_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_home_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5282328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "home_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team_score", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_home_team_score", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_home_team_score.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790", "fqn": ["nba_monte_carlo", "not_null_latest_results_home_team_score"], "alias": "not_null_latest_results_home_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_home_team_score.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5300467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_home_team_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team_score\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere home_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "home_team_score", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_visiting_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_visiting_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c", "fqn": ["nba_monte_carlo", "not_null_latest_results_visiting_team"], "alias": "not_null_latest_results_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_visiting_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5318274, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "visiting_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team_score", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_visiting_team_score", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_visiting_team_score.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c", "fqn": ["nba_monte_carlo", "not_null_latest_results_visiting_team_score"], "alias": "not_null_latest_results_visiting_team_score", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_visiting_team_score.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5339177, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_visiting_team_score.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team_score\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere visiting_team_score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "visiting_team_score", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_date", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_date.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af", "fqn": ["nba_monte_carlo", "not_null_latest_results_date"], "alias": "not_null_latest_results_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_date.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5356767, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "date", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "winning_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_winning_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_winning_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5", "fqn": ["nba_monte_carlo", "not_null_latest_results_winning_team"], "alias": "not_null_latest_results_winning_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_winning_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.537466, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_winning_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect winning_team\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere winning_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "winning_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "losing_team", "model": "{{ get_where_subquery(ref('latest_results')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_latest_results_losing_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_latest_results_losing_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce", "fqn": ["nba_monte_carlo", "not_null_latest_results_losing_team"], "alias": "not_null_latest_results_losing_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_latest_results_losing_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5393398, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["latest_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.latest_results"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_latest_results_losing_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect losing_team\nfrom \"mdsbox\".\"main\".\"latest_results\"\nwhere losing_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "losing_team", "file_key_name": "models.latest_results"}, "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_schedules_game_id", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_schedules_game_id.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48", "fqn": ["nba_monte_carlo", "unique_schedules_game_id"], "alias": "unique_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5414546, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["schedules"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.schedules"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    game_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"schedules\"\nwhere game_id is not null\ngroup by game_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "game_id", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "game_id", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_schedules_game_id", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_schedules_game_id.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7", "fqn": ["nba_monte_carlo", "not_null_schedules_game_id"], "alias": "not_null_schedules_game_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_schedules_game_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5432377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["schedules"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.schedules"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_schedules_game_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect game_id\nfrom \"mdsbox\".\"main\".\"schedules\"\nwhere game_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "game_id", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["reg_season", "playin_r1", "playin_r2", "playoffs_r1", "playoffs_r2", "playoffs_r3", "playoffs_r4"], "column_name": "type", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba", "fqn": ["nba_monte_carlo", "accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4"], "alias": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2"}, "created_at": 1678502497.5450094, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2\") }}", "language": "sql", "refs": [["schedules"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.schedules"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/accepted_values_schedules_7862bdb4b6e9efef5ffa090f3d5604d2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"schedules\"\n    group by type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'reg_season','playin_r1','playin_r2','playoffs_r1','playoffs_r2','playoffs_r3','playoffs_r4'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "type", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visiting_team", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_schedules_visiting_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_schedules_visiting_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70", "fqn": ["nba_monte_carlo", "not_null_schedules_visiting_team"], "alias": "not_null_schedules_visiting_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_schedules_visiting_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5560684, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["schedules"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.schedules"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_schedules_visiting_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect visiting_team\nfrom \"mdsbox\".\"main\".\"schedules\"\nwhere visiting_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "visiting_team", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "home_team", "model": "{{ get_where_subquery(ref('schedules')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_schedules_home_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_schedules_home_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9", "fqn": ["nba_monte_carlo", "not_null_schedules_home_team"], "alias": "not_null_schedules_home_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_schedules_home_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.558104, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["schedules"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.schedules"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_schedules_home_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect home_team\nfrom \"mdsbox\".\"main\".\"schedules\"\nwhere home_team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "home_team", "file_key_name": "models.schedules"}, "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ratings_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_ratings_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4", "fqn": ["nba_monte_carlo", "not_null_ratings_team"], "alias": "not_null_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5598855, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"ratings\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.unique_ratings_team.1bd609a155": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_ratings_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_ratings_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_ratings_team.1bd609a155", "fqn": ["nba_monte_carlo", "unique_ratings_team"], "alias": "unique_ratings_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_ratings_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5616684, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_ratings_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"ratings\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ratings_team_long", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_ratings_team_long.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06", "fqn": ["nba_monte_carlo", "not_null_ratings_team_long"], "alias": "not_null_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_ratings_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.563513, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"ratings\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team_long", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_ratings_team_long", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_ratings_team_long.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22", "fqn": ["nba_monte_carlo", "unique_ratings_team_long"], "alias": "unique_ratings_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_ratings_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5655231, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_ratings_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"ratings\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team_long", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.not_null_ratings_conf.aefb460047": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "conf", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ratings_conf", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_ratings_conf.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_ratings_conf.aefb460047", "fqn": ["nba_monte_carlo", "not_null_ratings_conf"], "alias": "not_null_ratings_conf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_ratings_conf.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5672796, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_conf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect conf\nfrom \"mdsbox\".\"main\".\"ratings\"\nwhere conf is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "conf", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["East", "West"], "column_name": "conf", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "accepted_values_ratings_conf__East__West", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "accepted_values_ratings_conf__East__West.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3", "fqn": ["nba_monte_carlo", "accepted_values_ratings_conf__East__West"], "alias": "accepted_values_ratings_conf__East__West", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/accepted_values_ratings_conf__East__West.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5690362, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/accepted_values_ratings_conf__East__West.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        conf as value_field,\n        count(*) as n_records\n\n    from \"mdsbox\".\"main\".\"ratings\"\n    group by conf\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'East','West'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "conf", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "elo_rating", "model": "{{ get_where_subquery(ref('ratings')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_ratings_elo_rating", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_ratings_elo_rating.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14", "fqn": ["nba_monte_carlo", "not_null_ratings_elo_rating"], "alias": "not_null_ratings_elo_rating", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_ratings_elo_rating.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.573956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["ratings"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.ratings"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_ratings_elo_rating.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect elo_rating\nfrom \"mdsbox\".\"main\".\"ratings\"\nwhere elo_rating is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "elo_rating", "file_key_name": "models.ratings"}, "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('post_season_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_post_season_schedule_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_post_season_schedule_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8", "fqn": ["nba_monte_carlo", "empty_table_post_season_schedule_"], "alias": "empty_table_post_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_post_season_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5756896, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["post_season_schedule"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.post_season_schedule"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_post_season_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"post_season_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.post_season_schedule"}, "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('reg_season_schedule')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_reg_season_schedule_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_reg_season_schedule_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef", "fqn": ["nba_monte_carlo", "empty_table_reg_season_schedule_"], "alias": "empty_table_reg_season_schedule_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_reg_season_schedule_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5800505, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["reg_season_schedule"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.reg_season_schedule"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_reg_season_schedule_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"reg_season_schedule\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.reg_season_schedule"}, "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('random_num_gen')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_random_num_gen_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_random_num_gen_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313", "fqn": ["nba_monte_carlo", "empty_table_random_num_gen_"], "alias": "empty_table_random_num_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_random_num_gen_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5841122, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["random_num_gen"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.random_num_gen"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_random_num_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"random_num_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.random_num_gen"}, "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2": {"test_metadata": {"name": "empty_table", "kwargs": {"model": "{{ get_where_subquery(ref('scenario_gen')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "empty_table_scenario_gen_", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "empty_table_scenario_gen_.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2", "fqn": ["nba_monte_carlo", "empty_table_scenario_gen_"], "alias": "empty_table_scenario_gen_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/empty_table_scenario_gen_.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5879369, "relation_name": null, "raw_code": "{{ test_empty_table(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["scenario_gen"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.nba_monte_carlo.test_empty_table", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.scenario_gen"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/empty_table_scenario_gen_.sql", "compiled": true, "compiled_code": "\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM \"mdsbox\".\"main\".\"scenario_gen\"\n    HAVING COUNT(*) = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.scenario_gen"}, "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_teams_team_long", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_teams_team_long.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef", "fqn": ["nba_monte_carlo", "unique_teams_team_long"], "alias": "unique_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5919802, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team_long as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"teams\"\nwhere team_long is not null\ngroup by team_long\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team_long", "file_key_name": "models.teams"}, "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_long", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_teams_team_long", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_teams_team_long.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8", "fqn": ["nba_monte_carlo", "not_null_teams_team_long"], "alias": "not_null_teams_team_long", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_teams_team_long.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.593793, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_teams_team_long.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team_long\nfrom \"mdsbox\".\"main\".\"teams\"\nwhere team_long is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team_long", "file_key_name": "models.teams"}, "test.nba_monte_carlo.unique_teams_team.a268dab99d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_teams_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_teams_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_teams_team.a268dab99d", "fqn": ["nba_monte_carlo", "unique_teams_team"], "alias": "unique_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_teams_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5956142, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_teams_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"teams\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.teams"}, "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('teams')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_teams_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_teams_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b", "fqn": ["nba_monte_carlo", "not_null_teams_team"], "alias": "not_null_teams_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_teams_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5976758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["teams"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.teams"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_teams_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"teams\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.teams"}, "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_vegas_wins_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_vegas_wins_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482", "fqn": ["nba_monte_carlo", "unique_vegas_wins_team"], "alias": "unique_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.5994494, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["vegas_wins"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.vegas_wins"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    team as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"vegas_wins\"\nwhere team is not null\ngroup by team\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.vegas_wins"}, "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team", "model": "{{ get_where_subquery(ref('vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_vegas_wins_team", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_vegas_wins_team.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61", "fqn": ["nba_monte_carlo", "not_null_vegas_wins_team"], "alias": "not_null_vegas_wins_team", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_vegas_wins_team.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.6011603, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["vegas_wins"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.vegas_wins"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_vegas_wins_team.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect team\nfrom \"mdsbox\".\"main\".\"vegas_wins\"\nwhere team is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "team", "file_key_name": "models.vegas_wins"}, "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "win_total", "model": "{{ get_where_subquery(ref('vegas_wins')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_vegas_wins_win_total", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_vegas_wins_win_total.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d", "fqn": ["nba_monte_carlo", "not_null_vegas_wins_win_total"], "alias": "not_null_vegas_wins_win_total", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_vegas_wins_win_total.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.6034284, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["vegas_wins"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.vegas_wins"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_vegas_wins_win_total.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect win_total\nfrom \"mdsbox\".\"main\".\"vegas_wins\"\nwhere win_total is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "win_total", "file_key_name": "models.vegas_wins"}, "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_xf_series_to_seed_series_id.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3", "fqn": ["nba_monte_carlo", "not_null_xf_series_to_seed_series_id"], "alias": "not_null_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_xf_series_to_seed_series_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.605693, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_xf_series_to_seed_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect series_id\nfrom \"mdsbox\".\"main\".\"xf_series_to_seed\"\nwhere series_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "series_id", "file_key_name": "models.xf_series_to_seed"}, "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "series_id", "model": "{{ get_where_subquery(ref('xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "unique_xf_series_to_seed_series_id", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "unique_xf_series_to_seed_series_id.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66", "fqn": ["nba_monte_carlo", "unique_xf_series_to_seed_series_id"], "alias": "unique_xf_series_to_seed_series_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/unique_xf_series_to_seed_series_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.607468, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/unique_xf_series_to_seed_series_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    series_id as unique_field,\n    count(*) as n_records\n\nfrom \"mdsbox\".\"main\".\"xf_series_to_seed\"\nwhere series_id is not null\ngroup by series_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "series_id", "file_key_name": "models.xf_series_to_seed"}, "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "seed", "model": "{{ get_where_subquery(ref('xf_series_to_seed')) }}"}, "namespace": null}, "database": "mdsbox", "schema": "main_dbt_test__audit", "name": "not_null_xf_series_to_seed_seed", "resource_type": "test", "package_name": "nba_monte_carlo", "path": "not_null_xf_series_to_seed_seed.sql", "original_file_path": "models/_docs.yml", "unique_id": "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832", "fqn": ["nba_monte_carlo", "not_null_xf_series_to_seed_seed"], "alias": "not_null_xf_series_to_seed_seed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "../docs/run/nba_monte_carlo/models/_docs.yml/not_null_xf_series_to_seed_seed.sql", "deferred": false, "unrendered_config": {}, "created_at": 1678502497.6092353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["xf_series_to_seed"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.dbt.should_store_failures", "macro.dbt.statement"], "nodes": ["model.nba_monte_carlo.xf_series_to_seed"]}, "compiled_path": "../docs/compiled/nba_monte_carlo/models/_docs.yml/not_null_xf_series_to_seed_seed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect seed\nfrom \"mdsbox\".\"main\".\"xf_series_to_seed\"\nwhere seed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "seed", "file_key_name": "models.xf_series_to_seed"}}, "sources": {"source.nba_monte_carlo.nba.schedule": {"database": "mdsbox", "schema": "psa", "name": "schedule", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba.schedule", "fqn": ["nba_monte_carlo", "nba", "schedule"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_schedule_2023", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "this is the nba schedule", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/psa/{identifier}/*.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/psa/nba_schedule_2023/*.parquet'", "created_at": 1678502497.6107993}, "source.nba_monte_carlo.nba.team_ratings": {"database": "mdsbox", "schema": "psa", "name": "team_ratings", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba.team_ratings", "fqn": ["nba_monte_carlo", "nba", "team_ratings"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "team_ratings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "team ELO ratings & win totals", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/psa/{identifier}/*.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/psa/team_ratings/*.parquet'", "created_at": 1678502497.611027}, "source.nba_monte_carlo.nba.xf_series_to_seed": {"database": "mdsbox", "schema": "psa", "name": "xf_series_to_seed", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba.xf_series_to_seed", "fqn": ["nba_monte_carlo", "nba", "xf_series_to_seed"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "xf_series_to_seed", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "cross ref table to match series to seeds", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/psa/{identifier}/*.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/psa/xf_series_to_seed/*.parquet'", "created_at": 1678502497.611215}, "source.nba_monte_carlo.nba.nba_elo_latest": {"database": "mdsbox", "schema": "psa", "name": "nba_elo_latest", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba.nba_elo_latest", "fqn": ["nba_monte_carlo", "nba", "nba_elo_latest"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "nba_elo_latest", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ratings from 538 repo", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/psa/{identifier}/*.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/psa/nba_elo_latest/*.parquet'", "created_at": 1678502497.6113944}, "source.nba_monte_carlo.nba.latest_RAPTOR_by_player": {"database": "mdsbox", "schema": "psa", "name": "latest_RAPTOR_by_player", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba.latest_RAPTOR_by_player", "fqn": ["nba_monte_carlo", "nba", "latest_RAPTOR_by_player"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "latest_RAPTOR_by_player", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "538 RAPTOR ratings by player", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/psa/{identifier}/*.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/psa/latest_RAPTOR_by_player/*.parquet'", "created_at": 1678502497.6115708}, "source.nba_monte_carlo.nba.latest_RAPTOR_by_team": {"database": "mdsbox", "schema": "psa", "name": "latest_RAPTOR_by_team", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba.latest_RAPTOR_by_team", "fqn": ["nba_monte_carlo", "nba", "latest_RAPTOR_by_team"], "source_name": "nba", "source_description": "", "loader": "", "identifier": "latest_RAPTOR_by_team", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "538 RAPTOR ratings by player by team & game type", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/psa/{identifier}/*.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/psa/latest_RAPTOR_by_team/*.parquet'", "created_at": 1678502497.6117449}, "source.nba_monte_carlo.nba_prep.elo_post": {"database": "mdsbox", "schema": "prep", "name": "elo_post", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba_prep.elo_post", "fqn": ["nba_monte_carlo", "nba_prep", "elo_post"], "source_name": "nba_prep", "source_description": "", "loader": "", "identifier": "elo_post", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "elo after running proc for record actual results", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/prep/{identifier}.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/prep/elo_post.parquet'", "created_at": 1678502497.6119158}, "source.nba_monte_carlo.nba_prep.results_log": {"database": "mdsbox", "schema": "prep", "name": "results_log", "resource_type": "source", "package_name": "nba_monte_carlo", "path": "models/_sources.yml", "original_file_path": "models/_sources.yml", "unique_id": "source.nba_monte_carlo.nba_prep.results_log", "fqn": ["nba_monte_carlo", "nba_prep", "results_log"], "source_name": "nba_prep", "source_description": "", "loader": "", "identifier": "results_log", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "game results with elo before each game. feeds into elo_post, which holds latest ratings", "columns": {}, "meta": {}, "source_meta": {"external_location": "/workspaces/nba-monte-carlo/data/data_catalog/prep/{identifier}.parquet"}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "'/workspaces/nba-monte-carlo/data/data_catalog/prep/results_log.parquet'", "created_at": 1678502497.612086}}, "macros": {"macro.nba_monte_carlo.elo_rollforward": {"name": "elo_rollforward", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/elo_rollforward.sql", "original_file_path": "macros/elo_rollforward.sql", "unique_id": "macro.nba_monte_carlo.elo_rollforward", "macro_sql": "{% macro elo_rollforward(dry_run='false') %}\n\n-- get the schedule loaded (will loop through this)\n{% set sql_statement %}\n    SELECT\n        (S._smart_source_lineno - 1) AS game_id,\n        S.team2 AS visiting_team,\n        S.team1 AS home_team,\n        CASE WHEN score1 > score2 THEN team1 ELSE team2 END AS winning_team,\n        CASE\n            WHEN score2 > score1 THEN 1\n            ELSE 0\n        END AS game_result\n    FROM '{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/psa/nba_elo_latest/*.parquet' S\n    WHERE score1 IS NOT NULL\n    GROUP BY ALL\n    ORDER BY S._smart_source_lineno\n{% endset %}\n{% do log(sql_statement, info=False) %}\n\n{% set log_table %}\n    CREATE OR REPLACE TABLE results_log(\n        game_id INTEGER, \n        visiting_team VARCHAR(3), \n        visiting_team_elo_rating REAL,\n        home_team VARCHAR(3),\n        home_team_elo_rating REAL,\n        winning_team VARCHAR(3),\n        elo_change REAL\n    )\n{% endset %}\n{% do log(log_table, info=True) %}\n{% do run_query(log_table) %}\n\n-- load elo ratings into a temporary table\n{% set temp_ratings %}\n    CREATE OR REPLACE TEMPORARY TABLE workings_ratings AS (\n        SELECT team, elo_rating::real as elo_rating, elo_rating::real AS original_rating\n        FROM  '{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/psa/team_ratings/*.parquet'\n        GROUP BY ALL\n    )\n{% endset %}\n{% do run_query(temp_ratings) %}\n{% do log(temp_ratings, info=False) %}\n\n{%- set updates = run_query(sql_statement) -%}\n\n{% for i in updates.rows  -%}\n    {% set game %}\n        SELECT \n            {{ i[0] }} AS game_id,\n            '{{ i[1] }}' AS visiting_team,\n            RV.elo_rating,\n           '{{ i[2] }}' AS home_team,\n            RH.elo_rating,\n            '{{ i[3] }}' AS winning_team,\n            {{ i[4] }} AS result\n        FROM workings_ratings RH\n            LEFT JOIN workings_ratings RV ON RV.team = '{{ i[1] }}'\n        WHERE RH.team = '{{ i[2] }}'\n    {% endset %}\n    {% set workings_game = run_query(game) %}\n    {% do log(game, info=False) %}\n    {% for j in workings_game.rows %}\n        {% set update_proc %}\n            UPDATE workings_ratings\n                SET elo_rating = elo_rating - {{ elo_diff( j[4] , j[2] , j[6] ) }}\n                WHERE team = '{{ j[3] }}';\n            UPDATE workings_ratings\n                SET elo_rating = elo_rating + {{ elo_diff( j[4] , j[2] , j[6] ) }}\n                WHERE team = '{{ j[1] }}';\n            INSERT INTO results_log VALUES \n                ({{ j[0] }},\n                '{{ j[1] }}',\n                {{ j[2] }},\n                '{{ j[3] }}',\n                {{ j[4] }},\n                '{{ j[5] }}',\n                {{ elo_diff( j[4] , j[2] , j[6] ) }});\n        {% endset %}\n        {%- do log(\"Running Update Statement for game_id \" ~ i[0] ~ \".\", info=True)  -%}\n        {% do log(update_proc, info=False) %}\n         {% if dry_run == 'false' %}\n            {% do run_query(update_proc) %}\n        {% endif %}\n    {% endfor %}\n    {% set update_proc = true %}\n{% endfor %} \n-- NOTE: because we are using duckdb in-memory, need to explicity materialize our result tables\n{% set output %}\n    COPY (SELECT * FROM workings_ratings ) TO '{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/prep/elo_post.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\n    COPY (SELECT * FROM results_log) TO '{{ env_var('MELTANO_PROJECT_ROOT') }}/data/data_catalog/prep/results_log.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\n{% endset %}\n{% do log(output, info=True) %}\n{% do run_query(output) %}\n{% do log(\"elo rollforward completed\", info=True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.nba_monte_carlo.elo_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2761762, "supported_languages": null}, "macro.nba_monte_carlo.test_empty_table": {"name": "test_empty_table", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.nba_monte_carlo.test_empty_table", "macro_sql": "{% test empty_table(model) %}\n\n    SELECT COALESCE(COUNT(*),0) AS records\n    FROM {{ model }}\n    HAVING COUNT(*) = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.276563, "supported_languages": null}, "macro.nba_monte_carlo.export_to_parquet": {"name": "export_to_parquet", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/export.sql", "original_file_path": "macros/export.sql", "unique_id": "macro.nba_monte_carlo.export_to_parquet", "macro_sql": "{% macro export_to_parquet(enable_export_var) %}\n\n{% set relations_to_export = dbt_utils.get_relations_by_pattern(\n    schema_pattern='%export',\n    table_pattern='%%'\n) %}\n\n{{ log('Statements to run:', info=True) }}\n\n{% for relation in relations_to_export %}\n    {% set export_command -%}\n        COPY (SELECT * FROM {{ relation }} ) TO '/tmp/data_catalog/conformed/{{ relation.name }}.parquet' (FORMAT 'parquet', CODEC 'ZSTD');\n    {%- endset %}\n    {% do log(export_command, info=True) %}\n    {% if enable_export_var == true %}\n        {% do run_query(export_command) %}\n    {% endif %}\n    {% set export_command = true %}\n{% endfor %}\n\n{% do run_query(sql_to_execute) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2784994, "supported_languages": null}, "macro.nba_monte_carlo.elo_calc": {"name": "elo_calc", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.nba_monte_carlo.elo_calc", "macro_sql": "{%- macro elo_calc(home_team, visiting_team) -%}\n   ( 1 - (1 / (10 ^ (-( {{visiting_team}} - {{home_team}} - 70)::real/400)+1))) * 10000\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2812588, "supported_languages": null}, "macro.nba_monte_carlo.elo_diff": {"name": "elo_diff", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.nba_monte_carlo.elo_diff", "macro_sql": "{%- macro elo_diff(home_team, visiting_team, result)  -%}\n   25.0 * (( {{result}} ) - (1 / (10 ^ ( - ({{visiting_team}} - {{home_team}} - 70)::real / 400) + 1)))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2816203, "supported_languages": null}, "macro.nba_monte_carlo.playoff_sim": {"name": "playoff_sim", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.nba_monte_carlo.playoff_sim", "macro_sql": "{% macro playoff_sim(round,seed_file) %}\n-- depends-on: {{ ref( 'random_num_gen' ) }}\n\nWITH cte_step_1 AS (\n    SELECT\n      R.scenario_id,\n      S.game_id,\n      S.series_id,\n      S.visiting_team AS visitor_key,\n      S.home_team AS home_key,\n      EV.winning_team AS visiting_team,\n      EV.elo_rating AS visiting_team_elo_rating,\n      EH.winning_team AS home_team,\n      EH.elo_rating AS home_team_elo_rating,\n      {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating' ) }} as home_team_win_probability,\n      R.rand_result,\n      CASE\n         WHEN {{ elo_calc( 'EH.elo_rating', 'EV.elo_rating' ) }} >= R.rand_result THEN EH.winning_team\n         ELSE EV.winning_team\n      END AS winning_team \n    FROM {{ ref( 'schedules' ) }} S\n    {% if target.name == 'parquet' %}\n    LEFT JOIN '/tmp/data_catalog/conformed/random_num_gen.parquet' R ON R.game_id = S.game_id\n    LEFT JOIN '{{ seed_file }}' EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN '{{ seed_file }}' EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    {% elif target.name != 'parquet' %}\n    LEFT JOIN {{ ref( 'random_num_gen' ) }} R ON R.game_id = S.game_id\n    LEFT JOIN  {{ ref( seed_file ) }} EH ON S.home_team = EH.seed AND R.scenario_id = EH.scenario_id\n    LEFT JOIN  {{ ref( seed_file ) }} EV ON S.visiting_team = EV.seed AND R.scenario_id = EV.scenario_id\n    {% endif %}\n    WHERE S.type =  '{{ round }}' ),\ncte_step_2 AS (\n    SELECT step1.*,\n        ROW_NUMBER() OVER (PARTITION BY scenario_id, series_id, winning_team  ORDER BY scenario_id, series_id, game_id ) AS series_result\n    FROM cte_step_1 step1\n),\ncte_final_game AS (\n    SELECT scenario_id,\n        series_id,\n        game_id\n    FROM cte_step_2\n    WHERE series_result = 4\n)\nSELECT step2.* \nFROM cte_step_2 step2\n    INNER JOIN cte_final_game F ON F.scenario_id = step2.scenario_id \n        AND f.series_id = step2.series_id AND step2.game_id <= f.game_id\nORDER BY step2.scenario_id, \n    step2.series_id, \n    step2.game_id\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.nba_monte_carlo.elo_calc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2830932, "supported_languages": null}, "macro.nba_monte_carlo.playoff_sim_end": {"name": "playoff_sim_end", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.nba_monte_carlo.playoff_sim_end", "macro_sql": "{%- macro playoff_sim_end(precedent) -%}\n\nSELECT\n    E.scenario_id,\n    E.series_id,\n    E.game_id,\n    E.winning_team,\n    CASE WHEN E.winning_team = E.home_team THEN E.home_team_elo_rating\n        ELSE E.visiting_team_elo_rating\n    END AS elo_rating,\n    XF.seed,\n    {{ var( 'sim_start_game_id' ) }} AS sim_start_game_id\nFROM {{ precedent }} E\nLEFT JOIN {{ ref( 'xf_series_to_seed' ) }} XF ON XF.series_id = E.series_id\nWHERE E.series_result = 4\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.283554, "supported_languages": null}, "macro.nba_monte_carlo.american_odds": {"name": "american_odds", "resource_type": "macro", "package_name": "nba_monte_carlo", "path": "macros/calcs.sql", "original_file_path": "macros/calcs.sql", "unique_id": "macro.nba_monte_carlo.american_odds", "macro_sql": "{%- macro american_odds(value) -%}\n\n    CASE WHEN {{ value }} >= 0.5 \n        THEN '-' || ROUND( {{ value }} / ( 1.0 - {{ value }} ) * 100 )::int\n        ELSE '+' || ((( 1.0 - {{ value }} ) / ({{ value }}::real ) * 100)::int)\n    END \n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2839644, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2853005, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_merge.sql", "original_file_path": "macros/snapshot_merge.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {% set insert_sql %}\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type = 'insert';\n    {% endset %}\n\n    {% do adapter.add_query(insert_sql, auto_begin=False) %}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id = {{ target.identifier }}.dbt_scd_id\n      and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n      and {{ target.identifier }}.dbt_valid_to is null;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2871587, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2888465, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2891095, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.2922833, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=adapter.use_database()) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3095565, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=adapter.use_database()) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3100839, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from information_schema.schemata\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3105056, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from information_schema.schemata\n        where schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3109922, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary and adapter.use_database()), schema=(not temporary)) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3126113, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    # For the DuckDBPyRelation checks\n    import duckdb\n\n    # make sure pandas exists before using it\n    try:\n        import pandas\n        pandas_available = True\n    except ImportError:\n        pandas_available = False\n\n    # make sure pyarrow exists before using it\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n\n    if isinstance(df, duckdb.DuckDBPyRelation):\n        if pyarrow_available:\n            df = df.arrow()\n        elif pandas_available:\n            df = df.df()\n        else:\n            raise Exception(\"No pandas or pyarrow available to materialize DuckDBPyRelation\")\n    elif not (\n      (pandas_available and isinstance(df, pandas.DataFrame))\n      or (pyarrow_available and isinstance(df, pyarrow.Table))\n    ):\n        raise Exception( str(type(df)) + \" is not a supported type for dbt Python materialization\")\n\n    con.execute('create table {{ relation.include(database=adapter.use_database()) }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.313211, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.include(database=adapter.use_database()) }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.313894, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3148005, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3154778, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation.include(database=adapter.use_database()) }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3160563, "supported_languages": null}, "macro.dbt_duckdb.duckdb__truncate_relation": {"name": "duckdb__truncate_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__truncate_relation", "macro_sql": "{% macro duckdb__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    DELETE FROM {{ relation.include(database=adapter.use_database()) }} WHERE 1=1\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3165238, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.317188, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3179243, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.318087, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3184686, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.318695, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3190136, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql": {"name": "duckdb__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql", "macro_sql": "{% macro duckdb__get_incremental_delete_insert_sql(arg_dict) %}\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"].include(database=adapter.use_database()), arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3198597, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_append_sql": {"name": "duckdb__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_append_sql", "macro_sql": "{% macro duckdb__get_incremental_append_sql(arg_dict) %}\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"].include(database=adapter.use_database()), arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3204641, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.320788, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, format, delimiter=',') -%}\n  {% if format == 'parquet' %}\n    {% set copy_to %}\n      copy {{ relation }} to '{{ location }}' (FORMAT 'parquet');\n    {% endset %}\n\n  {% elif format == 'csv' %}\n    {% set copy_to %}\n      copy {{ relation }} to '{{ location }}' (HEADER 1, DELIMITER '{{ delimiter }}');\n    {% endset %}\n\n  {% else %}\n      {% do exceptions.raise_compiler_error(\"%s external format is not supported!\" % format) %}\n  {% endif %}\n\n  {% call statement('write_to_file') -%}\n    {{ copy_to }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3220794, "supported_languages": null}, "macro.dbt_duckdb.register_glue_table": {"name": "register_glue_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.register_glue_table", "macro_sql": "{% macro register_glue_table(register, glue_database, relation, location, format) -%}\n  {% if location.startswith(\"s3://\") and register == true %}\n    {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n    {% do adapter.register_glue_table(glue_database, relation.identifier, column_list, location, format) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3230603, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3286834, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set format = render(config.get('format', default='parquet')) -%}\n  {%- set location = render(config.get('location', default=external_location(this, format))) -%}\n  {%- set delimiter = render(config.get('delimiter', default=',')) -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set glue_database = render(config.get('glue_database', default='default')) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, format, delimiter) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation.include(database=adapter.use_database()) }} as (\n        select * from '{{ location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {% do register_glue_table(glue_register, glue_database, target_relation, location, format) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.register_glue_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3382728, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3495026, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    coalesce(string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ], '')\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3504643, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, format) -%}\n  {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.350956, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.357117, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3581936, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3594468, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3597505, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3601856, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set format = render(upstream.config.get('format', 'parquet')) -%}\n        {%- set upstream_location = render(\n            upstream.config.get('location', external_location(upstream_rel, format)))\n        -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel.include(database=adapter.use_database()) }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3651395, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3662589, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3668847, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.367543, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.368455, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3691244, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3700025, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3705115, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3736584, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3748846, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.375519, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.378576, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3811693, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.382898, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3835464, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3847635, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3855097, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3861425, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.386646, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3889349, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3893058, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3902235, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3910973, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3923383, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3933568, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3935196, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3942683, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3946767, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3950229, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.395414, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3962455, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3973384, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.398224, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.398521, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3988662, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.3997552, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.402651, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4035327, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4039545, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4042969, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4046838, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.405243, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4056911, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4063327, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4067175, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4070694, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4099047, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.410262, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4109364, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.411334, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4121816, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4126656, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.413994, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4147127, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4164562, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.417426, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.41776, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.418166, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.418417, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.418779, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.418941, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4192882, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4196362, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4209058, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.421296, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4217343, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.422088, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4226449, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4236739, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4265509, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4268117, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4271905, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4274395, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4283657, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4287915, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4290202, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4295206, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4299285, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4304163, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.43085, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4313366, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4327903, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.433211, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4337475, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.434266, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4367263, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4420743, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4424443, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4429154, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.443535, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.444059, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4447381, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4451225, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.445598, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4462543, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.446645, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4470863, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4478111, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4483492, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.449564, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4500496, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4503503, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.45077, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.451491, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4521434, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4527886, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.454936, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4553585, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.455673, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4559805, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4562826, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.457022, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4578564, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4620428, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4629018, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4635653, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4697304, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.470125, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4706185, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4721415, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4724863, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.472848, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4758346, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4787407, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4796002, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.48018, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4861825, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4868178, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4871843, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4873803, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.487691, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4879427, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.488378, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4902604, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4906583, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4911973, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.4921467, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.503, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5095344, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.517139, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.519207, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5197172, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.520812, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.52128, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5215757, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5218735, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5221224, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.522457, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.522703, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5238636, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5243032, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5272498, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.52889, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5294359, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5298376, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5304549, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5308437, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5314624, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5318532, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5324035, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5327888, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5331087, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5337338, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.542046, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.545062, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.549151, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5519507, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.56242, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5684235, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5694916, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5735593, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5746381, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5772488, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5815847, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.583481, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5857794, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5866065, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.5890825, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6015944, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6034923, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6091557, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6099536, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6104565, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6143057, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6153443, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6157968, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6162047, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6167831, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6219854, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6229877, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6233857, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6243126, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6251943, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6259253, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6264937, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6268106, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6273918, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.627694, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.628336, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6288147, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6305962, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6309326, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6312745, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6315932, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.631932, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6322553, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6325977, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.632988, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6334445, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6337757, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6341124, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.634417, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6347506, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6350553, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.635549, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6357198, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6363866, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.636748, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6375415, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6382275, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6394033, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6402986, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6408975, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.641193, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6417603, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6420557, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6429744, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6433299, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6438124, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.644337, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6445687, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.645073, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6453333, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6457937, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6459584, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6464767, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6468277, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.647323, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.647587, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.648263, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6487453, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6493568, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.649645, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6502025, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6504905, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6509798, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.651322, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6519136, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6522076, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6527019, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6529238, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.653524, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6538126, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.654338, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6545708, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6555138, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6560044, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6566062, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6572409, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6582215, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6587613, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.659247, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6598165, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.660226, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.661892, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.66243, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6627789, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.664055, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6648846, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.666285, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6669395, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6676552, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.668317, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.669301, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6704485, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6714568, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6723173, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6733162, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6745048, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6753466, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6765177, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6779802, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6791873, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6809442, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.681759, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6825411, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.683461, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.684112, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6851027, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6859417, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6873052, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6891232, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6905174, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.69245, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6939938, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.6965458, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7017975, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7051322, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7067907, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7087655, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7096887, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7106955, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.712492, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7147489, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7158036, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.716542, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7173173, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7186768, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7195234, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.720129, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.722025, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7239802, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.724572, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.725193, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7265487, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7274044, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7281132, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7285438, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7289114, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7293186, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7319765, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7327657, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7343938, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7355323, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7362034, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7369518, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7392232, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7428052, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.74343, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7437243, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7449775, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7462702, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7467587, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.747514, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7481902, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.748931, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7501602, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7519803, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7532456, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.755077, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.756888, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7574992, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7587104, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7605696, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7625022, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.765756, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7703724, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7780552, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.780209, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7833066, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7841122, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7846189, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7860622, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7869642, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7873652, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.788477, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7891917, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.789529, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.78982, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7920697, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7930887, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7941003, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7945101, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7954688, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.797239, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7981606, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.7997186, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.800603, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.8020756, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.8030174, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1678502496.8047078, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.nba_monte_carlo.prep_results_log": ["source.nba_monte_carlo.nba_prep.elo_post", "source.nba_monte_carlo.nba_prep.results_log"], "model.nba_monte_carlo.prep_latest_ratings": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.prep_nba_elo_latest"], "model.nba_monte_carlo.prep_nba_elo_latest": ["source.nba_monte_carlo.nba.nba_elo_latest"], "model.nba_monte_carlo.prep_schedule": ["source.nba_monte_carlo.nba.schedule"], "model.nba_monte_carlo.prep_elo_post": ["source.nba_monte_carlo.nba_prep.elo_post"], "model.nba_monte_carlo.prep_xf_series_to_seed": ["source.nba_monte_carlo.nba.xf_series_to_seed"], "model.nba_monte_carlo.prep_team_ratings": ["source.nba_monte_carlo.nba.team_ratings"], "model.nba_monte_carlo.playoff_sim_r1": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.playoff_sim_r4": ["model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.playoff_sim_r2": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.initialize_seeding": ["model.nba_monte_carlo.playin_sim_r2_end", "model.nba_monte_carlo.reg_season_end"], "model.nba_monte_carlo.playoff_summary": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.teams"], "model.nba_monte_carlo.playoff_sim_r3": ["model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules", "model.nba_monte_carlo.xf_series_to_seed"], "model.nba_monte_carlo.season_summary": ["model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.ratings", "model.nba_monte_carlo.reg_season_summary"], "model.nba_monte_carlo.reg_season_summary": ["model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.vegas_wins"], "model.nba_monte_carlo.reg_season_simulator": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.reg_season_predictions": ["model.nba_monte_carlo.reg_season_simulator"], "model.nba_monte_carlo.reg_season_actuals_enriched": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.prep_results_log", "model.nba_monte_carlo.teams"], "model.nba_monte_carlo.reg_season_actuals": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.teams"], "model.nba_monte_carlo.reg_season_end": ["model.nba_monte_carlo.reg_season_simulator"], "model.nba_monte_carlo.reg_season_schedule": ["model.nba_monte_carlo.prep_nba_elo_latest", "model.nba_monte_carlo.ratings", "model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.random_num_gen": ["model.nba_monte_carlo.scenario_gen", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.schedules": ["model.nba_monte_carlo.post_season_schedule", "model.nba_monte_carlo.reg_season_schedule"], "model.nba_monte_carlo.xf_series_to_seed": ["model.nba_monte_carlo.prep_xf_series_to_seed"], "model.nba_monte_carlo.teams": ["model.nba_monte_carlo.prep_schedule", "model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.post_season_schedule": ["model.nba_monte_carlo.prep_schedule"], "model.nba_monte_carlo.vegas_wins": ["model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.ratings": ["model.nba_monte_carlo.prep_elo_post", "model.nba_monte_carlo.prep_team_ratings"], "model.nba_monte_carlo.latest_results": ["model.nba_monte_carlo.prep_nba_elo_latest"], "model.nba_monte_carlo.scenario_gen": [], "model.nba_monte_carlo.playin_sim_r2_end": ["model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r2"], "model.nba_monte_carlo.playin_sim_r2": ["model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.playin_sim_r1_end", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.playin_sim_r1": ["model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.schedules"], "model.nba_monte_carlo.playin_sim_r1_end": ["model.nba_monte_carlo.playin_sim_r1"], "operation.nba_monte_carlo.nba_monte_carlo-on-run-end-0": [], "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6": ["model.nba_monte_carlo.prep_nba_elo_latest"], "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc": ["model.nba_monte_carlo.prep_schedule"], "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2": ["model.nba_monte_carlo.prep_team_ratings"], "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5": ["model.nba_monte_carlo.prep_xf_series_to_seed"], "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca": ["model.nba_monte_carlo.prep_latest_ratings"], "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15": ["model.nba_monte_carlo.prep_latest_ratings"], "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce": ["model.nba_monte_carlo.latest_results"], "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9": ["model.nba_monte_carlo.schedules"], "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.unique_ratings_team.1bd609a155": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.not_null_ratings_conf.aefb460047": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14": ["model.nba_monte_carlo.ratings"], "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8": ["model.nba_monte_carlo.post_season_schedule"], "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef": ["model.nba_monte_carlo.reg_season_schedule"], "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313": ["model.nba_monte_carlo.random_num_gen"], "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2": ["model.nba_monte_carlo.scenario_gen"], "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.unique_teams_team.a268dab99d": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b": ["model.nba_monte_carlo.teams"], "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482": ["model.nba_monte_carlo.vegas_wins"], "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61": ["model.nba_monte_carlo.vegas_wins"], "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d": ["model.nba_monte_carlo.vegas_wins"], "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3": ["model.nba_monte_carlo.xf_series_to_seed"], "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66": ["model.nba_monte_carlo.xf_series_to_seed"], "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832": ["model.nba_monte_carlo.xf_series_to_seed"], "source.nba_monte_carlo.nba.schedule": [], "source.nba_monte_carlo.nba.team_ratings": [], "source.nba_monte_carlo.nba.xf_series_to_seed": [], "source.nba_monte_carlo.nba.nba_elo_latest": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_player": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_team": [], "source.nba_monte_carlo.nba_prep.elo_post": [], "source.nba_monte_carlo.nba_prep.results_log": []}, "child_map": {"model.nba_monte_carlo.prep_results_log": ["model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched"], "model.nba_monte_carlo.prep_latest_ratings": ["test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15", "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca"], "model.nba_monte_carlo.prep_nba_elo_latest": ["model.nba_monte_carlo.latest_results", "model.nba_monte_carlo.prep_latest_ratings", "model.nba_monte_carlo.prep_latest_ratings", "model.nba_monte_carlo.reg_season_schedule", "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6"], "model.nba_monte_carlo.prep_schedule": ["model.nba_monte_carlo.post_season_schedule", "model.nba_monte_carlo.teams", "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc"], "model.nba_monte_carlo.prep_elo_post": ["model.nba_monte_carlo.ratings"], "model.nba_monte_carlo.prep_xf_series_to_seed": ["model.nba_monte_carlo.xf_series_to_seed", "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5"], "model.nba_monte_carlo.prep_team_ratings": ["model.nba_monte_carlo.ratings", "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2"], "model.nba_monte_carlo.playoff_sim_r1": ["model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.playoff_sim_r4": ["model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.playoff_sim_r2": ["model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.initialize_seeding": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.playoff_summary": ["model.nba_monte_carlo.season_summary"], "model.nba_monte_carlo.playoff_sim_r3": ["model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_summary"], "model.nba_monte_carlo.season_summary": [], "model.nba_monte_carlo.reg_season_summary": ["model.nba_monte_carlo.season_summary"], "model.nba_monte_carlo.reg_season_simulator": ["model.nba_monte_carlo.reg_season_end", "model.nba_monte_carlo.reg_season_predictions"], "model.nba_monte_carlo.reg_season_predictions": [], "model.nba_monte_carlo.reg_season_actuals_enriched": [], "model.nba_monte_carlo.reg_season_actuals": ["model.nba_monte_carlo.reg_season_summary"], "model.nba_monte_carlo.reg_season_end": ["model.nba_monte_carlo.initialize_seeding", "model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.reg_season_summary"], "model.nba_monte_carlo.reg_season_schedule": ["model.nba_monte_carlo.schedules", "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef"], "model.nba_monte_carlo.random_num_gen": ["model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.reg_season_simulator", "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313"], "model.nba_monte_carlo.schedules": ["model.nba_monte_carlo.playin_sim_r1", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "model.nba_monte_carlo.random_num_gen", "model.nba_monte_carlo.reg_season_simulator", "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba", "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7", "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9", "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70", "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48"], "model.nba_monte_carlo.xf_series_to_seed": ["model.nba_monte_carlo.playoff_sim_r1", "model.nba_monte_carlo.playoff_sim_r2", "model.nba_monte_carlo.playoff_sim_r3", "model.nba_monte_carlo.playoff_sim_r4", "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832", "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3", "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66"], "model.nba_monte_carlo.teams": ["model.nba_monte_carlo.playoff_summary", "model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_actuals_enriched", "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b", "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8", "test.nba_monte_carlo.unique_teams_team.a268dab99d", "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef"], "model.nba_monte_carlo.post_season_schedule": ["model.nba_monte_carlo.schedules", "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8"], "model.nba_monte_carlo.vegas_wins": ["model.nba_monte_carlo.reg_season_summary", "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61", "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d", "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482"], "model.nba_monte_carlo.ratings": ["model.nba_monte_carlo.reg_season_schedule", "model.nba_monte_carlo.reg_season_schedule", "model.nba_monte_carlo.season_summary", "model.nba_monte_carlo.teams", "model.nba_monte_carlo.vegas_wins", "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3", "test.nba_monte_carlo.not_null_ratings_conf.aefb460047", "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14", "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4", "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06", "test.nba_monte_carlo.unique_ratings_team.1bd609a155", "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22"], "model.nba_monte_carlo.latest_results": ["model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_actuals", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_actuals_enriched", "model.nba_monte_carlo.reg_season_simulator", "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af", "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628", "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704", "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790", "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce", "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c", "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c", "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5", "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270"], "model.nba_monte_carlo.scenario_gen": ["model.nba_monte_carlo.random_num_gen", "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2"], "model.nba_monte_carlo.playin_sim_r2_end": ["model.nba_monte_carlo.initialize_seeding"], "model.nba_monte_carlo.playin_sim_r2": ["model.nba_monte_carlo.playin_sim_r2_end"], "model.nba_monte_carlo.playin_sim_r1": ["model.nba_monte_carlo.playin_sim_r1_end"], "model.nba_monte_carlo.playin_sim_r1_end": ["model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playin_sim_r2", "model.nba_monte_carlo.playin_sim_r2_end"], "operation.nba_monte_carlo.nba_monte_carlo-on-run-end-0": [], "test.nba_monte_carlo.empty_table_prep_nba_elo_latest_.2f897d3ab6": [], "test.nba_monte_carlo.empty_table_prep_schedule_.67a48d6ecc": [], "test.nba_monte_carlo.empty_table_prep_team_ratings_.820075bbe2": [], "test.nba_monte_carlo.empty_table_prep_xf_series_to_seed_.aa86cc61a5": [], "test.nba_monte_carlo.unique_prep_latest_ratings_team.fe3e9499ca": [], "test.nba_monte_carlo.empty_table_prep_latest_ratings_.d193308c15": [], "test.nba_monte_carlo.unique_latest_results_game_id.1c98eeb270": [], "test.nba_monte_carlo.not_null_latest_results_game_id.a68ef0c628": [], "test.nba_monte_carlo.not_null_latest_results_home_team.1a7c351704": [], "test.nba_monte_carlo.not_null_latest_results_home_team_score.8462ec4790": [], "test.nba_monte_carlo.not_null_latest_results_visiting_team.cba6550a1c": [], "test.nba_monte_carlo.not_null_latest_results_visiting_team_score.922086a03c": [], "test.nba_monte_carlo.not_null_latest_results_date.76604cb0af": [], "test.nba_monte_carlo.not_null_latest_results_winning_team.31606125c5": [], "test.nba_monte_carlo.not_null_latest_results_losing_team.63391801ce": [], "test.nba_monte_carlo.unique_schedules_game_id.891eaf0b48": [], "test.nba_monte_carlo.not_null_schedules_game_id.b5537eedb7": [], "test.nba_monte_carlo.accepted_values_schedules_type__reg_season__playin_r1__playin_r2__playoffs_r1__playoffs_r2__playoffs_r3__playoffs_r4.a9150d38ba": [], "test.nba_monte_carlo.not_null_schedules_visiting_team.fe363c0b70": [], "test.nba_monte_carlo.not_null_schedules_home_team.3e630337e9": [], "test.nba_monte_carlo.not_null_ratings_team.b4f3c4c6c4": [], "test.nba_monte_carlo.unique_ratings_team.1bd609a155": [], "test.nba_monte_carlo.not_null_ratings_team_long.7e95b25d06": [], "test.nba_monte_carlo.unique_ratings_team_long.d5886b2f22": [], "test.nba_monte_carlo.not_null_ratings_conf.aefb460047": [], "test.nba_monte_carlo.accepted_values_ratings_conf__East__West.20846f9fa3": [], "test.nba_monte_carlo.not_null_ratings_elo_rating.0e2f6eaa14": [], "test.nba_monte_carlo.empty_table_post_season_schedule_.ea8961d3e8": [], "test.nba_monte_carlo.empty_table_reg_season_schedule_.1d11e42bef": [], "test.nba_monte_carlo.empty_table_random_num_gen_.5dd5ce0313": [], "test.nba_monte_carlo.empty_table_scenario_gen_.109ff538b2": [], "test.nba_monte_carlo.unique_teams_team_long.0d8a0ecdef": [], "test.nba_monte_carlo.not_null_teams_team_long.b38b6aa9e8": [], "test.nba_monte_carlo.unique_teams_team.a268dab99d": [], "test.nba_monte_carlo.not_null_teams_team.b7e6b73c9b": [], "test.nba_monte_carlo.unique_vegas_wins_team.c8a4b3b482": [], "test.nba_monte_carlo.not_null_vegas_wins_team.bdb6178e61": [], "test.nba_monte_carlo.not_null_vegas_wins_win_total.7be1cafa7d": [], "test.nba_monte_carlo.not_null_xf_series_to_seed_series_id.9a2758d5f3": [], "test.nba_monte_carlo.unique_xf_series_to_seed_series_id.5088423c66": [], "test.nba_monte_carlo.not_null_xf_series_to_seed_seed.9ad3cbf832": [], "source.nba_monte_carlo.nba.schedule": ["model.nba_monte_carlo.prep_schedule"], "source.nba_monte_carlo.nba.team_ratings": ["model.nba_monte_carlo.prep_team_ratings"], "source.nba_monte_carlo.nba.xf_series_to_seed": ["model.nba_monte_carlo.prep_xf_series_to_seed"], "source.nba_monte_carlo.nba.nba_elo_latest": ["model.nba_monte_carlo.prep_nba_elo_latest"], "source.nba_monte_carlo.nba.latest_RAPTOR_by_player": [], "source.nba_monte_carlo.nba.latest_RAPTOR_by_team": [], "source.nba_monte_carlo.nba_prep.elo_post": ["model.nba_monte_carlo.prep_elo_post", "model.nba_monte_carlo.prep_results_log"], "source.nba_monte_carlo.nba_prep.results_log": ["model.nba_monte_carlo.prep_results_log"]}}